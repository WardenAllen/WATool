// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: CSBase.proto

#include "CSBase.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_CSBase_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CSProtoPosInfo_CSBase_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_CSBase_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MovementInfo_CSBase_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_CSBase_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RoleBaseInfo_CSBase_2eproto;
namespace CSProto {
class RoleBaseInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RoleBaseInfo> _instance;
} _RoleBaseInfo_default_instance_;
class CSProtoPosInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CSProtoPosInfo> _instance;
} _CSProtoPosInfo_default_instance_;
class MovementInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MovementInfo> _instance;
} _MovementInfo_default_instance_;
class EnterRoomRoleInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<EnterRoomRoleInfo> _instance;
} _EnterRoomRoleInfo_default_instance_;
class MoveRoleInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MoveRoleInfo> _instance;
} _MoveRoleInfo_default_instance_;
}  // namespace CSProto
static void InitDefaultsscc_info_CSProtoPosInfo_CSBase_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::CSProto::_CSProtoPosInfo_default_instance_;
    new (ptr) ::CSProto::CSProtoPosInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CSProtoPosInfo_CSBase_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CSProtoPosInfo_CSBase_2eproto}, {}};

static void InitDefaultsscc_info_EnterRoomRoleInfo_CSBase_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::CSProto::_EnterRoomRoleInfo_default_instance_;
    new (ptr) ::CSProto::EnterRoomRoleInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_EnterRoomRoleInfo_CSBase_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_EnterRoomRoleInfo_CSBase_2eproto}, {
      &scc_info_RoleBaseInfo_CSBase_2eproto.base,
      &scc_info_MovementInfo_CSBase_2eproto.base,}};

static void InitDefaultsscc_info_MoveRoleInfo_CSBase_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::CSProto::_MoveRoleInfo_default_instance_;
    new (ptr) ::CSProto::MoveRoleInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MoveRoleInfo_CSBase_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_MoveRoleInfo_CSBase_2eproto}, {
      &scc_info_MovementInfo_CSBase_2eproto.base,}};

static void InitDefaultsscc_info_MovementInfo_CSBase_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::CSProto::_MovementInfo_default_instance_;
    new (ptr) ::CSProto::MovementInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MovementInfo_CSBase_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_MovementInfo_CSBase_2eproto}, {
      &scc_info_CSProtoPosInfo_CSBase_2eproto.base,}};

static void InitDefaultsscc_info_RoleBaseInfo_CSBase_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::CSProto::_RoleBaseInfo_default_instance_;
    new (ptr) ::CSProto::RoleBaseInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RoleBaseInfo_CSBase_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RoleBaseInfo_CSBase_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_CSBase_2eproto[5];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_CSBase_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_CSBase_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_CSBase_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CSProto::RoleBaseInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CSProto::RoleBaseInfo, userid_),
  PROTOBUF_FIELD_OFFSET(::CSProto::RoleBaseInfo, username_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CSProto::CSProtoPosInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CSProto::CSProtoPosInfo, indexx_),
  PROTOBUF_FIELD_OFFSET(::CSProto::CSProtoPosInfo, indexy_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CSProto::MovementInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CSProto::MovementInfo, movedir_),
  PROTOBUF_FIELD_OFFSET(::CSProto::MovementInfo, facedir_),
  PROTOBUF_FIELD_OFFSET(::CSProto::MovementInfo, time_),
  PROTOBUF_FIELD_OFFSET(::CSProto::MovementInfo, servertime_),
  PROTOBUF_FIELD_OFFSET(::CSProto::MovementInfo, movetype_),
  PROTOBUF_FIELD_OFFSET(::CSProto::MovementInfo, position_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CSProto::EnterRoomRoleInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CSProto::EnterRoomRoleInfo, role_),
  PROTOBUF_FIELD_OFFSET(::CSProto::EnterRoomRoleInfo, movement_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CSProto::MoveRoleInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CSProto::MoveRoleInfo, userid_),
  PROTOBUF_FIELD_OFFSET(::CSProto::MoveRoleInfo, movement_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::CSProto::RoleBaseInfo)},
  { 7, -1, sizeof(::CSProto::CSProtoPosInfo)},
  { 14, -1, sizeof(::CSProto::MovementInfo)},
  { 25, -1, sizeof(::CSProto::EnterRoomRoleInfo)},
  { 32, -1, sizeof(::CSProto::MoveRoleInfo)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::CSProto::_RoleBaseInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::CSProto::_CSProtoPosInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::CSProto::_MovementInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::CSProto::_EnterRoomRoleInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::CSProto::_MoveRoleInfo_default_instance_),
};

const char descriptor_table_protodef_CSBase_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\014CSBase.proto\022\007CSProto\"0\n\014RoleBaseInfo\022"
  "\016\n\006UserID\030\001 \001(\004\022\020\n\010Username\030\002 \001(\t\"0\n\016CSP"
  "rotoPosInfo\022\016\n\006IndexX\030\001 \001(\005\022\016\n\006IndexY\030\002 "
  "\001(\005\"\217\001\n\014MovementInfo\022\017\n\007MoveDir\030\001 \001(\005\022\017\n"
  "\007FaceDir\030\002 \001(\005\022\014\n\004Time\030\003 \001(\005\022\022\n\nServerTi"
  "me\030\004 \001(\005\022\020\n\010MoveType\030\005 \001(\005\022)\n\010Position\030\006"
  " \001(\0132\027.CSProto.CSProtoPosInfo\"a\n\021EnterRo"
  "omRoleInfo\022#\n\004Role\030\001 \001(\0132\025.CSProto.RoleB"
  "aseInfo\022\'\n\010Movement\030\002 \001(\0132\025.CSProto.Move"
  "mentInfo\"G\n\014MoveRoleInfo\022\016\n\006UserID\030\001 \001(\004"
  "\022\'\n\010Movement\030\002 \001(\0132\025.CSProto.MovementInf"
  "o*\243\002\n\005MsgID\022\010\n\004NONE\020\000\022\010\n\004PING\020\001\022\010\n\004PONG\020"
  "\002\022\r\n\tTestReqID\0203\022\r\n\tTestAckID\0204\022\016\n\nError"
  "AckID\020d\022\017\n\nLoginReqID\020\220N\022\017\n\nLoginAckID\020\221"
  "N\022\023\n\016EnterRoomReqID\020\232N\022\023\n\016EnterRoomAckID"
  "\020\233N\022\023\n\016EnterRoomNtfID\020\234N\022\023\n\016LeaveRoomReq"
  "ID\020\237N\022\023\n\016LeaveRoomAckID\020\240N\022\023\n\016LeaveRoomN"
  "tfID\020\241N\022\016\n\tMoveReqID\020\245N\022\016\n\tMoveAckID\020\246N\022"
  "\016\n\tMoveNtfID\020\247N*7\n\013ErrorCodeID\022\n\n\006Defalt"
  "\020\000\022\013\n\007Success\020\001\022\017\n\013LoginAck_20\020\024b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_CSBase_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_CSBase_2eproto_sccs[5] = {
  &scc_info_CSProtoPosInfo_CSBase_2eproto.base,
  &scc_info_EnterRoomRoleInfo_CSBase_2eproto.base,
  &scc_info_MoveRoleInfo_CSBase_2eproto.base,
  &scc_info_MovementInfo_CSBase_2eproto.base,
  &scc_info_RoleBaseInfo_CSBase_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_CSBase_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_CSBase_2eproto = {
  false, false, descriptor_table_protodef_CSBase_2eproto, "CSBase.proto", 800,
  &descriptor_table_CSBase_2eproto_once, descriptor_table_CSBase_2eproto_sccs, descriptor_table_CSBase_2eproto_deps, 5, 0,
  schemas, file_default_instances, TableStruct_CSBase_2eproto::offsets,
  file_level_metadata_CSBase_2eproto, 5, file_level_enum_descriptors_CSBase_2eproto, file_level_service_descriptors_CSBase_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_CSBase_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_CSBase_2eproto)), true);
namespace CSProto {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MsgID_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_CSBase_2eproto);
  return file_level_enum_descriptors_CSBase_2eproto[0];
}
bool MsgID_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 51:
    case 52:
    case 100:
    case 10000:
    case 10001:
    case 10010:
    case 10011:
    case 10012:
    case 10015:
    case 10016:
    case 10017:
    case 10021:
    case 10022:
    case 10023:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ErrorCodeID_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_CSBase_2eproto);
  return file_level_enum_descriptors_CSBase_2eproto[1];
}
bool ErrorCodeID_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 20:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class RoleBaseInfo::_Internal {
 public:
};

RoleBaseInfo::RoleBaseInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CSProto.RoleBaseInfo)
}
RoleBaseInfo::RoleBaseInfo(const RoleBaseInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  username_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_username().empty()) {
    username_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_username(), 
      GetArena());
  }
  userid_ = from.userid_;
  // @@protoc_insertion_point(copy_constructor:CSProto.RoleBaseInfo)
}

void RoleBaseInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RoleBaseInfo_CSBase_2eproto.base);
  username_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  userid_ = PROTOBUF_ULONGLONG(0);
}

RoleBaseInfo::~RoleBaseInfo() {
  // @@protoc_insertion_point(destructor:CSProto.RoleBaseInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RoleBaseInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  username_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void RoleBaseInfo::ArenaDtor(void* object) {
  RoleBaseInfo* _this = reinterpret_cast< RoleBaseInfo* >(object);
  (void)_this;
}
void RoleBaseInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RoleBaseInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RoleBaseInfo& RoleBaseInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RoleBaseInfo_CSBase_2eproto.base);
  return *internal_default_instance();
}


void RoleBaseInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:CSProto.RoleBaseInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  username_.ClearToEmpty();
  userid_ = PROTOBUF_ULONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RoleBaseInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 UserID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          userid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string Username = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_username();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CSProto.RoleBaseInfo.Username"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RoleBaseInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CSProto.RoleBaseInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 UserID = 1;
  if (this->userid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_userid(), target);
  }

  // string Username = 2;
  if (this->username().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_username().data(), static_cast<int>(this->_internal_username().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "CSProto.RoleBaseInfo.Username");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_username(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSProto.RoleBaseInfo)
  return target;
}

size_t RoleBaseInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CSProto.RoleBaseInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string Username = 2;
  if (this->username().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_username());
  }

  // uint64 UserID = 1;
  if (this->userid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_userid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RoleBaseInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CSProto.RoleBaseInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const RoleBaseInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RoleBaseInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CSProto.RoleBaseInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CSProto.RoleBaseInfo)
    MergeFrom(*source);
  }
}

void RoleBaseInfo::MergeFrom(const RoleBaseInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CSProto.RoleBaseInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.username().size() > 0) {
    _internal_set_username(from._internal_username());
  }
  if (from.userid() != 0) {
    _internal_set_userid(from._internal_userid());
  }
}

void RoleBaseInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CSProto.RoleBaseInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoleBaseInfo::CopyFrom(const RoleBaseInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CSProto.RoleBaseInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoleBaseInfo::IsInitialized() const {
  return true;
}

void RoleBaseInfo::InternalSwap(RoleBaseInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  username_.Swap(&other->username_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(userid_, other->userid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RoleBaseInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CSProtoPosInfo::_Internal {
 public:
};

CSProtoPosInfo::CSProtoPosInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CSProto.CSProtoPosInfo)
}
CSProtoPosInfo::CSProtoPosInfo(const CSProtoPosInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&indexx_, &from.indexx_,
    static_cast<size_t>(reinterpret_cast<char*>(&indexy_) -
    reinterpret_cast<char*>(&indexx_)) + sizeof(indexy_));
  // @@protoc_insertion_point(copy_constructor:CSProto.CSProtoPosInfo)
}

void CSProtoPosInfo::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&indexx_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&indexy_) -
      reinterpret_cast<char*>(&indexx_)) + sizeof(indexy_));
}

CSProtoPosInfo::~CSProtoPosInfo() {
  // @@protoc_insertion_point(destructor:CSProto.CSProtoPosInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CSProtoPosInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CSProtoPosInfo::ArenaDtor(void* object) {
  CSProtoPosInfo* _this = reinterpret_cast< CSProtoPosInfo* >(object);
  (void)_this;
}
void CSProtoPosInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSProtoPosInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CSProtoPosInfo& CSProtoPosInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CSProtoPosInfo_CSBase_2eproto.base);
  return *internal_default_instance();
}


void CSProtoPosInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:CSProto.CSProtoPosInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&indexx_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&indexy_) -
      reinterpret_cast<char*>(&indexx_)) + sizeof(indexy_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSProtoPosInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 IndexX = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          indexx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 IndexY = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          indexy_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSProtoPosInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CSProto.CSProtoPosInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 IndexX = 1;
  if (this->indexx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_indexx(), target);
  }

  // int32 IndexY = 2;
  if (this->indexy() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_indexy(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSProto.CSProtoPosInfo)
  return target;
}

size_t CSProtoPosInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CSProto.CSProtoPosInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 IndexX = 1;
  if (this->indexx() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_indexx());
  }

  // int32 IndexY = 2;
  if (this->indexy() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_indexy());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSProtoPosInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CSProto.CSProtoPosInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const CSProtoPosInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CSProtoPosInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CSProto.CSProtoPosInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CSProto.CSProtoPosInfo)
    MergeFrom(*source);
  }
}

void CSProtoPosInfo::MergeFrom(const CSProtoPosInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CSProto.CSProtoPosInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.indexx() != 0) {
    _internal_set_indexx(from._internal_indexx());
  }
  if (from.indexy() != 0) {
    _internal_set_indexy(from._internal_indexy());
  }
}

void CSProtoPosInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CSProto.CSProtoPosInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSProtoPosInfo::CopyFrom(const CSProtoPosInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CSProto.CSProtoPosInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSProtoPosInfo::IsInitialized() const {
  return true;
}

void CSProtoPosInfo::InternalSwap(CSProtoPosInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CSProtoPosInfo, indexy_)
      + sizeof(CSProtoPosInfo::indexy_)
      - PROTOBUF_FIELD_OFFSET(CSProtoPosInfo, indexx_)>(
          reinterpret_cast<char*>(&indexx_),
          reinterpret_cast<char*>(&other->indexx_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CSProtoPosInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class MovementInfo::_Internal {
 public:
  static const ::CSProto::CSProtoPosInfo& position(const MovementInfo* msg);
};

const ::CSProto::CSProtoPosInfo&
MovementInfo::_Internal::position(const MovementInfo* msg) {
  return *msg->position_;
}
MovementInfo::MovementInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CSProto.MovementInfo)
}
MovementInfo::MovementInfo(const MovementInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_position()) {
    position_ = new ::CSProto::CSProtoPosInfo(*from.position_);
  } else {
    position_ = nullptr;
  }
  ::memcpy(&movedir_, &from.movedir_,
    static_cast<size_t>(reinterpret_cast<char*>(&movetype_) -
    reinterpret_cast<char*>(&movedir_)) + sizeof(movetype_));
  // @@protoc_insertion_point(copy_constructor:CSProto.MovementInfo)
}

void MovementInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MovementInfo_CSBase_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&position_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&movetype_) -
      reinterpret_cast<char*>(&position_)) + sizeof(movetype_));
}

MovementInfo::~MovementInfo() {
  // @@protoc_insertion_point(destructor:CSProto.MovementInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MovementInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete position_;
}

void MovementInfo::ArenaDtor(void* object) {
  MovementInfo* _this = reinterpret_cast< MovementInfo* >(object);
  (void)_this;
}
void MovementInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MovementInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MovementInfo& MovementInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MovementInfo_CSBase_2eproto.base);
  return *internal_default_instance();
}


void MovementInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:CSProto.MovementInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && position_ != nullptr) {
    delete position_;
  }
  position_ = nullptr;
  ::memset(&movedir_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&movetype_) -
      reinterpret_cast<char*>(&movedir_)) + sizeof(movetype_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MovementInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 MoveDir = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          movedir_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 FaceDir = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          facedir_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 Time = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 ServerTime = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          servertime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 MoveType = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          movetype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .CSProto.CSProtoPosInfo Position = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_position(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MovementInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CSProto.MovementInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 MoveDir = 1;
  if (this->movedir() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_movedir(), target);
  }

  // int32 FaceDir = 2;
  if (this->facedir() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_facedir(), target);
  }

  // int32 Time = 3;
  if (this->time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_time(), target);
  }

  // int32 ServerTime = 4;
  if (this->servertime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_servertime(), target);
  }

  // int32 MoveType = 5;
  if (this->movetype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_movetype(), target);
  }

  // .CSProto.CSProtoPosInfo Position = 6;
  if (this->has_position()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::position(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSProto.MovementInfo)
  return target;
}

size_t MovementInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CSProto.MovementInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .CSProto.CSProtoPosInfo Position = 6;
  if (this->has_position()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *position_);
  }

  // int32 MoveDir = 1;
  if (this->movedir() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_movedir());
  }

  // int32 FaceDir = 2;
  if (this->facedir() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_facedir());
  }

  // int32 Time = 3;
  if (this->time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_time());
  }

  // int32 ServerTime = 4;
  if (this->servertime() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_servertime());
  }

  // int32 MoveType = 5;
  if (this->movetype() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_movetype());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MovementInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CSProto.MovementInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const MovementInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MovementInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CSProto.MovementInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CSProto.MovementInfo)
    MergeFrom(*source);
  }
}

void MovementInfo::MergeFrom(const MovementInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CSProto.MovementInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_position()) {
    _internal_mutable_position()->::CSProto::CSProtoPosInfo::MergeFrom(from._internal_position());
  }
  if (from.movedir() != 0) {
    _internal_set_movedir(from._internal_movedir());
  }
  if (from.facedir() != 0) {
    _internal_set_facedir(from._internal_facedir());
  }
  if (from.time() != 0) {
    _internal_set_time(from._internal_time());
  }
  if (from.servertime() != 0) {
    _internal_set_servertime(from._internal_servertime());
  }
  if (from.movetype() != 0) {
    _internal_set_movetype(from._internal_movetype());
  }
}

void MovementInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CSProto.MovementInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MovementInfo::CopyFrom(const MovementInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CSProto.MovementInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MovementInfo::IsInitialized() const {
  return true;
}

void MovementInfo::InternalSwap(MovementInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MovementInfo, movetype_)
      + sizeof(MovementInfo::movetype_)
      - PROTOBUF_FIELD_OFFSET(MovementInfo, position_)>(
          reinterpret_cast<char*>(&position_),
          reinterpret_cast<char*>(&other->position_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MovementInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class EnterRoomRoleInfo::_Internal {
 public:
  static const ::CSProto::RoleBaseInfo& role(const EnterRoomRoleInfo* msg);
  static const ::CSProto::MovementInfo& movement(const EnterRoomRoleInfo* msg);
};

const ::CSProto::RoleBaseInfo&
EnterRoomRoleInfo::_Internal::role(const EnterRoomRoleInfo* msg) {
  return *msg->role_;
}
const ::CSProto::MovementInfo&
EnterRoomRoleInfo::_Internal::movement(const EnterRoomRoleInfo* msg) {
  return *msg->movement_;
}
EnterRoomRoleInfo::EnterRoomRoleInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CSProto.EnterRoomRoleInfo)
}
EnterRoomRoleInfo::EnterRoomRoleInfo(const EnterRoomRoleInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_role()) {
    role_ = new ::CSProto::RoleBaseInfo(*from.role_);
  } else {
    role_ = nullptr;
  }
  if (from._internal_has_movement()) {
    movement_ = new ::CSProto::MovementInfo(*from.movement_);
  } else {
    movement_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:CSProto.EnterRoomRoleInfo)
}

void EnterRoomRoleInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_EnterRoomRoleInfo_CSBase_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&role_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&movement_) -
      reinterpret_cast<char*>(&role_)) + sizeof(movement_));
}

EnterRoomRoleInfo::~EnterRoomRoleInfo() {
  // @@protoc_insertion_point(destructor:CSProto.EnterRoomRoleInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void EnterRoomRoleInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete role_;
  if (this != internal_default_instance()) delete movement_;
}

void EnterRoomRoleInfo::ArenaDtor(void* object) {
  EnterRoomRoleInfo* _this = reinterpret_cast< EnterRoomRoleInfo* >(object);
  (void)_this;
}
void EnterRoomRoleInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void EnterRoomRoleInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EnterRoomRoleInfo& EnterRoomRoleInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_EnterRoomRoleInfo_CSBase_2eproto.base);
  return *internal_default_instance();
}


void EnterRoomRoleInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:CSProto.EnterRoomRoleInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && role_ != nullptr) {
    delete role_;
  }
  role_ = nullptr;
  if (GetArena() == nullptr && movement_ != nullptr) {
    delete movement_;
  }
  movement_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EnterRoomRoleInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .CSProto.RoleBaseInfo Role = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_role(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .CSProto.MovementInfo Movement = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_movement(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* EnterRoomRoleInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CSProto.EnterRoomRoleInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .CSProto.RoleBaseInfo Role = 1;
  if (this->has_role()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::role(this), target, stream);
  }

  // .CSProto.MovementInfo Movement = 2;
  if (this->has_movement()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::movement(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSProto.EnterRoomRoleInfo)
  return target;
}

size_t EnterRoomRoleInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CSProto.EnterRoomRoleInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .CSProto.RoleBaseInfo Role = 1;
  if (this->has_role()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *role_);
  }

  // .CSProto.MovementInfo Movement = 2;
  if (this->has_movement()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *movement_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EnterRoomRoleInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CSProto.EnterRoomRoleInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const EnterRoomRoleInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<EnterRoomRoleInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CSProto.EnterRoomRoleInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CSProto.EnterRoomRoleInfo)
    MergeFrom(*source);
  }
}

void EnterRoomRoleInfo::MergeFrom(const EnterRoomRoleInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CSProto.EnterRoomRoleInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_role()) {
    _internal_mutable_role()->::CSProto::RoleBaseInfo::MergeFrom(from._internal_role());
  }
  if (from.has_movement()) {
    _internal_mutable_movement()->::CSProto::MovementInfo::MergeFrom(from._internal_movement());
  }
}

void EnterRoomRoleInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CSProto.EnterRoomRoleInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EnterRoomRoleInfo::CopyFrom(const EnterRoomRoleInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CSProto.EnterRoomRoleInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EnterRoomRoleInfo::IsInitialized() const {
  return true;
}

void EnterRoomRoleInfo::InternalSwap(EnterRoomRoleInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(EnterRoomRoleInfo, movement_)
      + sizeof(EnterRoomRoleInfo::movement_)
      - PROTOBUF_FIELD_OFFSET(EnterRoomRoleInfo, role_)>(
          reinterpret_cast<char*>(&role_),
          reinterpret_cast<char*>(&other->role_));
}

::PROTOBUF_NAMESPACE_ID::Metadata EnterRoomRoleInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class MoveRoleInfo::_Internal {
 public:
  static const ::CSProto::MovementInfo& movement(const MoveRoleInfo* msg);
};

const ::CSProto::MovementInfo&
MoveRoleInfo::_Internal::movement(const MoveRoleInfo* msg) {
  return *msg->movement_;
}
MoveRoleInfo::MoveRoleInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CSProto.MoveRoleInfo)
}
MoveRoleInfo::MoveRoleInfo(const MoveRoleInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_movement()) {
    movement_ = new ::CSProto::MovementInfo(*from.movement_);
  } else {
    movement_ = nullptr;
  }
  userid_ = from.userid_;
  // @@protoc_insertion_point(copy_constructor:CSProto.MoveRoleInfo)
}

void MoveRoleInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MoveRoleInfo_CSBase_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&movement_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&userid_) -
      reinterpret_cast<char*>(&movement_)) + sizeof(userid_));
}

MoveRoleInfo::~MoveRoleInfo() {
  // @@protoc_insertion_point(destructor:CSProto.MoveRoleInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MoveRoleInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete movement_;
}

void MoveRoleInfo::ArenaDtor(void* object) {
  MoveRoleInfo* _this = reinterpret_cast< MoveRoleInfo* >(object);
  (void)_this;
}
void MoveRoleInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MoveRoleInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MoveRoleInfo& MoveRoleInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MoveRoleInfo_CSBase_2eproto.base);
  return *internal_default_instance();
}


void MoveRoleInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:CSProto.MoveRoleInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && movement_ != nullptr) {
    delete movement_;
  }
  movement_ = nullptr;
  userid_ = PROTOBUF_ULONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MoveRoleInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 UserID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          userid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .CSProto.MovementInfo Movement = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_movement(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MoveRoleInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CSProto.MoveRoleInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 UserID = 1;
  if (this->userid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_userid(), target);
  }

  // .CSProto.MovementInfo Movement = 2;
  if (this->has_movement()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::movement(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSProto.MoveRoleInfo)
  return target;
}

size_t MoveRoleInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CSProto.MoveRoleInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .CSProto.MovementInfo Movement = 2;
  if (this->has_movement()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *movement_);
  }

  // uint64 UserID = 1;
  if (this->userid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_userid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MoveRoleInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CSProto.MoveRoleInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const MoveRoleInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MoveRoleInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CSProto.MoveRoleInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CSProto.MoveRoleInfo)
    MergeFrom(*source);
  }
}

void MoveRoleInfo::MergeFrom(const MoveRoleInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CSProto.MoveRoleInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_movement()) {
    _internal_mutable_movement()->::CSProto::MovementInfo::MergeFrom(from._internal_movement());
  }
  if (from.userid() != 0) {
    _internal_set_userid(from._internal_userid());
  }
}

void MoveRoleInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CSProto.MoveRoleInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MoveRoleInfo::CopyFrom(const MoveRoleInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CSProto.MoveRoleInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MoveRoleInfo::IsInitialized() const {
  return true;
}

void MoveRoleInfo::InternalSwap(MoveRoleInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MoveRoleInfo, userid_)
      + sizeof(MoveRoleInfo::userid_)
      - PROTOBUF_FIELD_OFFSET(MoveRoleInfo, movement_)>(
          reinterpret_cast<char*>(&movement_),
          reinterpret_cast<char*>(&other->movement_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MoveRoleInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace CSProto
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::CSProto::RoleBaseInfo* Arena::CreateMaybeMessage< ::CSProto::RoleBaseInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CSProto::RoleBaseInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::CSProto::CSProtoPosInfo* Arena::CreateMaybeMessage< ::CSProto::CSProtoPosInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CSProto::CSProtoPosInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::CSProto::MovementInfo* Arena::CreateMaybeMessage< ::CSProto::MovementInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CSProto::MovementInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::CSProto::EnterRoomRoleInfo* Arena::CreateMaybeMessage< ::CSProto::EnterRoomRoleInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CSProto::EnterRoomRoleInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::CSProto::MoveRoleInfo* Arena::CreateMaybeMessage< ::CSProto::MoveRoleInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CSProto::MoveRoleInfo >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
