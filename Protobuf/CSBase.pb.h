// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: CSBase.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_CSBase_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_CSBase_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3014000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3014000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_CSBase_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_CSBase_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[5]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_CSBase_2eproto;
namespace CSProto {
class CSProtoPosInfo;
class CSProtoPosInfoDefaultTypeInternal;
extern CSProtoPosInfoDefaultTypeInternal _CSProtoPosInfo_default_instance_;
class EnterRoomRoleInfo;
class EnterRoomRoleInfoDefaultTypeInternal;
extern EnterRoomRoleInfoDefaultTypeInternal _EnterRoomRoleInfo_default_instance_;
class MoveRoleInfo;
class MoveRoleInfoDefaultTypeInternal;
extern MoveRoleInfoDefaultTypeInternal _MoveRoleInfo_default_instance_;
class MovementInfo;
class MovementInfoDefaultTypeInternal;
extern MovementInfoDefaultTypeInternal _MovementInfo_default_instance_;
class RoleBaseInfo;
class RoleBaseInfoDefaultTypeInternal;
extern RoleBaseInfoDefaultTypeInternal _RoleBaseInfo_default_instance_;
}  // namespace CSProto
PROTOBUF_NAMESPACE_OPEN
template<> ::CSProto::CSProtoPosInfo* Arena::CreateMaybeMessage<::CSProto::CSProtoPosInfo>(Arena*);
template<> ::CSProto::EnterRoomRoleInfo* Arena::CreateMaybeMessage<::CSProto::EnterRoomRoleInfo>(Arena*);
template<> ::CSProto::MoveRoleInfo* Arena::CreateMaybeMessage<::CSProto::MoveRoleInfo>(Arena*);
template<> ::CSProto::MovementInfo* Arena::CreateMaybeMessage<::CSProto::MovementInfo>(Arena*);
template<> ::CSProto::RoleBaseInfo* Arena::CreateMaybeMessage<::CSProto::RoleBaseInfo>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace CSProto {

enum MsgID : int {
  NONE = 0,
  PING = 1,
  PONG = 2,
  TestReqID = 51,
  TestAckID = 52,
  ErrorAckID = 100,
  LoginReqID = 10000,
  LoginAckID = 10001,
  EnterRoomReqID = 10010,
  EnterRoomAckID = 10011,
  EnterRoomNtfID = 10012,
  LeaveRoomReqID = 10015,
  LeaveRoomAckID = 10016,
  LeaveRoomNtfID = 10017,
  MoveReqID = 10021,
  MoveAckID = 10022,
  MoveNtfID = 10023,
  MsgID_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  MsgID_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool MsgID_IsValid(int value);
constexpr MsgID MsgID_MIN = NONE;
constexpr MsgID MsgID_MAX = MoveNtfID;
constexpr int MsgID_ARRAYSIZE = MsgID_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MsgID_descriptor();
template<typename T>
inline const std::string& MsgID_Name(T enum_t_value) {
  static_assert(::std::is_same<T, MsgID>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function MsgID_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    MsgID_descriptor(), enum_t_value);
}
inline bool MsgID_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, MsgID* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<MsgID>(
    MsgID_descriptor(), name, value);
}
enum ErrorCodeID : int {
  Defalt = 0,
  Success = 1,
  LoginAck_20 = 20,
  ErrorCodeID_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  ErrorCodeID_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool ErrorCodeID_IsValid(int value);
constexpr ErrorCodeID ErrorCodeID_MIN = Defalt;
constexpr ErrorCodeID ErrorCodeID_MAX = LoginAck_20;
constexpr int ErrorCodeID_ARRAYSIZE = ErrorCodeID_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ErrorCodeID_descriptor();
template<typename T>
inline const std::string& ErrorCodeID_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ErrorCodeID>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ErrorCodeID_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ErrorCodeID_descriptor(), enum_t_value);
}
inline bool ErrorCodeID_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ErrorCodeID* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ErrorCodeID>(
    ErrorCodeID_descriptor(), name, value);
}
// ===================================================================

class RoleBaseInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CSProto.RoleBaseInfo) */ {
 public:
  inline RoleBaseInfo() : RoleBaseInfo(nullptr) {}
  virtual ~RoleBaseInfo();

  RoleBaseInfo(const RoleBaseInfo& from);
  RoleBaseInfo(RoleBaseInfo&& from) noexcept
    : RoleBaseInfo() {
    *this = ::std::move(from);
  }

  inline RoleBaseInfo& operator=(const RoleBaseInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline RoleBaseInfo& operator=(RoleBaseInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RoleBaseInfo& default_instance();

  static inline const RoleBaseInfo* internal_default_instance() {
    return reinterpret_cast<const RoleBaseInfo*>(
               &_RoleBaseInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(RoleBaseInfo& a, RoleBaseInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(RoleBaseInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RoleBaseInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RoleBaseInfo* New() const final {
    return CreateMaybeMessage<RoleBaseInfo>(nullptr);
  }

  RoleBaseInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RoleBaseInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RoleBaseInfo& from);
  void MergeFrom(const RoleBaseInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RoleBaseInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CSProto.RoleBaseInfo";
  }
  protected:
  explicit RoleBaseInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_CSBase_2eproto);
    return ::descriptor_table_CSBase_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUsernameFieldNumber = 2,
    kUserIDFieldNumber = 1,
  };
  // string Username = 2;
  void clear_username();
  const std::string& username() const;
  void set_username(const std::string& value);
  void set_username(std::string&& value);
  void set_username(const char* value);
  void set_username(const char* value, size_t size);
  std::string* mutable_username();
  std::string* release_username();
  void set_allocated_username(std::string* username);
  private:
  const std::string& _internal_username() const;
  void _internal_set_username(const std::string& value);
  std::string* _internal_mutable_username();
  public:

  // uint64 UserID = 1;
  void clear_userid();
  ::PROTOBUF_NAMESPACE_ID::uint64 userid() const;
  void set_userid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_userid() const;
  void _internal_set_userid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:CSProto.RoleBaseInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr username_;
  ::PROTOBUF_NAMESPACE_ID::uint64 userid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_CSBase_2eproto;
};
// -------------------------------------------------------------------

class CSProtoPosInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CSProto.CSProtoPosInfo) */ {
 public:
  inline CSProtoPosInfo() : CSProtoPosInfo(nullptr) {}
  virtual ~CSProtoPosInfo();

  CSProtoPosInfo(const CSProtoPosInfo& from);
  CSProtoPosInfo(CSProtoPosInfo&& from) noexcept
    : CSProtoPosInfo() {
    *this = ::std::move(from);
  }

  inline CSProtoPosInfo& operator=(const CSProtoPosInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSProtoPosInfo& operator=(CSProtoPosInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CSProtoPosInfo& default_instance();

  static inline const CSProtoPosInfo* internal_default_instance() {
    return reinterpret_cast<const CSProtoPosInfo*>(
               &_CSProtoPosInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(CSProtoPosInfo& a, CSProtoPosInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(CSProtoPosInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSProtoPosInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CSProtoPosInfo* New() const final {
    return CreateMaybeMessage<CSProtoPosInfo>(nullptr);
  }

  CSProtoPosInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CSProtoPosInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CSProtoPosInfo& from);
  void MergeFrom(const CSProtoPosInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSProtoPosInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CSProto.CSProtoPosInfo";
  }
  protected:
  explicit CSProtoPosInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_CSBase_2eproto);
    return ::descriptor_table_CSBase_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIndexXFieldNumber = 1,
    kIndexYFieldNumber = 2,
  };
  // int32 IndexX = 1;
  void clear_indexx();
  ::PROTOBUF_NAMESPACE_ID::int32 indexx() const;
  void set_indexx(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_indexx() const;
  void _internal_set_indexx(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 IndexY = 2;
  void clear_indexy();
  ::PROTOBUF_NAMESPACE_ID::int32 indexy() const;
  void set_indexy(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_indexy() const;
  void _internal_set_indexy(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:CSProto.CSProtoPosInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 indexx_;
  ::PROTOBUF_NAMESPACE_ID::int32 indexy_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_CSBase_2eproto;
};
// -------------------------------------------------------------------

class MovementInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CSProto.MovementInfo) */ {
 public:
  inline MovementInfo() : MovementInfo(nullptr) {}
  virtual ~MovementInfo();

  MovementInfo(const MovementInfo& from);
  MovementInfo(MovementInfo&& from) noexcept
    : MovementInfo() {
    *this = ::std::move(from);
  }

  inline MovementInfo& operator=(const MovementInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline MovementInfo& operator=(MovementInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MovementInfo& default_instance();

  static inline const MovementInfo* internal_default_instance() {
    return reinterpret_cast<const MovementInfo*>(
               &_MovementInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(MovementInfo& a, MovementInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(MovementInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MovementInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MovementInfo* New() const final {
    return CreateMaybeMessage<MovementInfo>(nullptr);
  }

  MovementInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MovementInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MovementInfo& from);
  void MergeFrom(const MovementInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MovementInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CSProto.MovementInfo";
  }
  protected:
  explicit MovementInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_CSBase_2eproto);
    return ::descriptor_table_CSBase_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPositionFieldNumber = 6,
    kMoveDirFieldNumber = 1,
    kFaceDirFieldNumber = 2,
    kTimeFieldNumber = 3,
    kServerTimeFieldNumber = 4,
    kMoveTypeFieldNumber = 5,
  };
  // .CSProto.CSProtoPosInfo Position = 6;
  bool has_position() const;
  private:
  bool _internal_has_position() const;
  public:
  void clear_position();
  const ::CSProto::CSProtoPosInfo& position() const;
  ::CSProto::CSProtoPosInfo* release_position();
  ::CSProto::CSProtoPosInfo* mutable_position();
  void set_allocated_position(::CSProto::CSProtoPosInfo* position);
  private:
  const ::CSProto::CSProtoPosInfo& _internal_position() const;
  ::CSProto::CSProtoPosInfo* _internal_mutable_position();
  public:
  void unsafe_arena_set_allocated_position(
      ::CSProto::CSProtoPosInfo* position);
  ::CSProto::CSProtoPosInfo* unsafe_arena_release_position();

  // int32 MoveDir = 1;
  void clear_movedir();
  ::PROTOBUF_NAMESPACE_ID::int32 movedir() const;
  void set_movedir(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_movedir() const;
  void _internal_set_movedir(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 FaceDir = 2;
  void clear_facedir();
  ::PROTOBUF_NAMESPACE_ID::int32 facedir() const;
  void set_facedir(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_facedir() const;
  void _internal_set_facedir(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 Time = 3;
  void clear_time();
  ::PROTOBUF_NAMESPACE_ID::int32 time() const;
  void set_time(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_time() const;
  void _internal_set_time(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 ServerTime = 4;
  void clear_servertime();
  ::PROTOBUF_NAMESPACE_ID::int32 servertime() const;
  void set_servertime(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_servertime() const;
  void _internal_set_servertime(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 MoveType = 5;
  void clear_movetype();
  ::PROTOBUF_NAMESPACE_ID::int32 movetype() const;
  void set_movetype(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_movetype() const;
  void _internal_set_movetype(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:CSProto.MovementInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::CSProto::CSProtoPosInfo* position_;
  ::PROTOBUF_NAMESPACE_ID::int32 movedir_;
  ::PROTOBUF_NAMESPACE_ID::int32 facedir_;
  ::PROTOBUF_NAMESPACE_ID::int32 time_;
  ::PROTOBUF_NAMESPACE_ID::int32 servertime_;
  ::PROTOBUF_NAMESPACE_ID::int32 movetype_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_CSBase_2eproto;
};
// -------------------------------------------------------------------

class EnterRoomRoleInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CSProto.EnterRoomRoleInfo) */ {
 public:
  inline EnterRoomRoleInfo() : EnterRoomRoleInfo(nullptr) {}
  virtual ~EnterRoomRoleInfo();

  EnterRoomRoleInfo(const EnterRoomRoleInfo& from);
  EnterRoomRoleInfo(EnterRoomRoleInfo&& from) noexcept
    : EnterRoomRoleInfo() {
    *this = ::std::move(from);
  }

  inline EnterRoomRoleInfo& operator=(const EnterRoomRoleInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline EnterRoomRoleInfo& operator=(EnterRoomRoleInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const EnterRoomRoleInfo& default_instance();

  static inline const EnterRoomRoleInfo* internal_default_instance() {
    return reinterpret_cast<const EnterRoomRoleInfo*>(
               &_EnterRoomRoleInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(EnterRoomRoleInfo& a, EnterRoomRoleInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(EnterRoomRoleInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EnterRoomRoleInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EnterRoomRoleInfo* New() const final {
    return CreateMaybeMessage<EnterRoomRoleInfo>(nullptr);
  }

  EnterRoomRoleInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EnterRoomRoleInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const EnterRoomRoleInfo& from);
  void MergeFrom(const EnterRoomRoleInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EnterRoomRoleInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CSProto.EnterRoomRoleInfo";
  }
  protected:
  explicit EnterRoomRoleInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_CSBase_2eproto);
    return ::descriptor_table_CSBase_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRoleFieldNumber = 1,
    kMovementFieldNumber = 2,
  };
  // .CSProto.RoleBaseInfo Role = 1;
  bool has_role() const;
  private:
  bool _internal_has_role() const;
  public:
  void clear_role();
  const ::CSProto::RoleBaseInfo& role() const;
  ::CSProto::RoleBaseInfo* release_role();
  ::CSProto::RoleBaseInfo* mutable_role();
  void set_allocated_role(::CSProto::RoleBaseInfo* role);
  private:
  const ::CSProto::RoleBaseInfo& _internal_role() const;
  ::CSProto::RoleBaseInfo* _internal_mutable_role();
  public:
  void unsafe_arena_set_allocated_role(
      ::CSProto::RoleBaseInfo* role);
  ::CSProto::RoleBaseInfo* unsafe_arena_release_role();

  // .CSProto.MovementInfo Movement = 2;
  bool has_movement() const;
  private:
  bool _internal_has_movement() const;
  public:
  void clear_movement();
  const ::CSProto::MovementInfo& movement() const;
  ::CSProto::MovementInfo* release_movement();
  ::CSProto::MovementInfo* mutable_movement();
  void set_allocated_movement(::CSProto::MovementInfo* movement);
  private:
  const ::CSProto::MovementInfo& _internal_movement() const;
  ::CSProto::MovementInfo* _internal_mutable_movement();
  public:
  void unsafe_arena_set_allocated_movement(
      ::CSProto::MovementInfo* movement);
  ::CSProto::MovementInfo* unsafe_arena_release_movement();

  // @@protoc_insertion_point(class_scope:CSProto.EnterRoomRoleInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::CSProto::RoleBaseInfo* role_;
  ::CSProto::MovementInfo* movement_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_CSBase_2eproto;
};
// -------------------------------------------------------------------

class MoveRoleInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CSProto.MoveRoleInfo) */ {
 public:
  inline MoveRoleInfo() : MoveRoleInfo(nullptr) {}
  virtual ~MoveRoleInfo();

  MoveRoleInfo(const MoveRoleInfo& from);
  MoveRoleInfo(MoveRoleInfo&& from) noexcept
    : MoveRoleInfo() {
    *this = ::std::move(from);
  }

  inline MoveRoleInfo& operator=(const MoveRoleInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline MoveRoleInfo& operator=(MoveRoleInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MoveRoleInfo& default_instance();

  static inline const MoveRoleInfo* internal_default_instance() {
    return reinterpret_cast<const MoveRoleInfo*>(
               &_MoveRoleInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(MoveRoleInfo& a, MoveRoleInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(MoveRoleInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MoveRoleInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MoveRoleInfo* New() const final {
    return CreateMaybeMessage<MoveRoleInfo>(nullptr);
  }

  MoveRoleInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MoveRoleInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MoveRoleInfo& from);
  void MergeFrom(const MoveRoleInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MoveRoleInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CSProto.MoveRoleInfo";
  }
  protected:
  explicit MoveRoleInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_CSBase_2eproto);
    return ::descriptor_table_CSBase_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMovementFieldNumber = 2,
    kUserIDFieldNumber = 1,
  };
  // .CSProto.MovementInfo Movement = 2;
  bool has_movement() const;
  private:
  bool _internal_has_movement() const;
  public:
  void clear_movement();
  const ::CSProto::MovementInfo& movement() const;
  ::CSProto::MovementInfo* release_movement();
  ::CSProto::MovementInfo* mutable_movement();
  void set_allocated_movement(::CSProto::MovementInfo* movement);
  private:
  const ::CSProto::MovementInfo& _internal_movement() const;
  ::CSProto::MovementInfo* _internal_mutable_movement();
  public:
  void unsafe_arena_set_allocated_movement(
      ::CSProto::MovementInfo* movement);
  ::CSProto::MovementInfo* unsafe_arena_release_movement();

  // uint64 UserID = 1;
  void clear_userid();
  ::PROTOBUF_NAMESPACE_ID::uint64 userid() const;
  void set_userid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_userid() const;
  void _internal_set_userid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:CSProto.MoveRoleInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::CSProto::MovementInfo* movement_;
  ::PROTOBUF_NAMESPACE_ID::uint64 userid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_CSBase_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// RoleBaseInfo

// uint64 UserID = 1;
inline void RoleBaseInfo::clear_userid() {
  userid_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 RoleBaseInfo::_internal_userid() const {
  return userid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 RoleBaseInfo::userid() const {
  // @@protoc_insertion_point(field_get:CSProto.RoleBaseInfo.UserID)
  return _internal_userid();
}
inline void RoleBaseInfo::_internal_set_userid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  userid_ = value;
}
inline void RoleBaseInfo::set_userid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_userid(value);
  // @@protoc_insertion_point(field_set:CSProto.RoleBaseInfo.UserID)
}

// string Username = 2;
inline void RoleBaseInfo::clear_username() {
  username_.ClearToEmpty();
}
inline const std::string& RoleBaseInfo::username() const {
  // @@protoc_insertion_point(field_get:CSProto.RoleBaseInfo.Username)
  return _internal_username();
}
inline void RoleBaseInfo::set_username(const std::string& value) {
  _internal_set_username(value);
  // @@protoc_insertion_point(field_set:CSProto.RoleBaseInfo.Username)
}
inline std::string* RoleBaseInfo::mutable_username() {
  // @@protoc_insertion_point(field_mutable:CSProto.RoleBaseInfo.Username)
  return _internal_mutable_username();
}
inline const std::string& RoleBaseInfo::_internal_username() const {
  return username_.Get();
}
inline void RoleBaseInfo::_internal_set_username(const std::string& value) {
  
  username_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void RoleBaseInfo::set_username(std::string&& value) {
  
  username_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CSProto.RoleBaseInfo.Username)
}
inline void RoleBaseInfo::set_username(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  username_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CSProto.RoleBaseInfo.Username)
}
inline void RoleBaseInfo::set_username(const char* value,
    size_t size) {
  
  username_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CSProto.RoleBaseInfo.Username)
}
inline std::string* RoleBaseInfo::_internal_mutable_username() {
  
  return username_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* RoleBaseInfo::release_username() {
  // @@protoc_insertion_point(field_release:CSProto.RoleBaseInfo.Username)
  return username_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RoleBaseInfo::set_allocated_username(std::string* username) {
  if (username != nullptr) {
    
  } else {
    
  }
  username_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), username,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CSProto.RoleBaseInfo.Username)
}

// -------------------------------------------------------------------

// CSProtoPosInfo

// int32 IndexX = 1;
inline void CSProtoPosInfo::clear_indexx() {
  indexx_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSProtoPosInfo::_internal_indexx() const {
  return indexx_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSProtoPosInfo::indexx() const {
  // @@protoc_insertion_point(field_get:CSProto.CSProtoPosInfo.IndexX)
  return _internal_indexx();
}
inline void CSProtoPosInfo::_internal_set_indexx(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  indexx_ = value;
}
inline void CSProtoPosInfo::set_indexx(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_indexx(value);
  // @@protoc_insertion_point(field_set:CSProto.CSProtoPosInfo.IndexX)
}

// int32 IndexY = 2;
inline void CSProtoPosInfo::clear_indexy() {
  indexy_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSProtoPosInfo::_internal_indexy() const {
  return indexy_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSProtoPosInfo::indexy() const {
  // @@protoc_insertion_point(field_get:CSProto.CSProtoPosInfo.IndexY)
  return _internal_indexy();
}
inline void CSProtoPosInfo::_internal_set_indexy(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  indexy_ = value;
}
inline void CSProtoPosInfo::set_indexy(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_indexy(value);
  // @@protoc_insertion_point(field_set:CSProto.CSProtoPosInfo.IndexY)
}

// -------------------------------------------------------------------

// MovementInfo

// int32 MoveDir = 1;
inline void MovementInfo::clear_movedir() {
  movedir_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MovementInfo::_internal_movedir() const {
  return movedir_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MovementInfo::movedir() const {
  // @@protoc_insertion_point(field_get:CSProto.MovementInfo.MoveDir)
  return _internal_movedir();
}
inline void MovementInfo::_internal_set_movedir(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  movedir_ = value;
}
inline void MovementInfo::set_movedir(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_movedir(value);
  // @@protoc_insertion_point(field_set:CSProto.MovementInfo.MoveDir)
}

// int32 FaceDir = 2;
inline void MovementInfo::clear_facedir() {
  facedir_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MovementInfo::_internal_facedir() const {
  return facedir_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MovementInfo::facedir() const {
  // @@protoc_insertion_point(field_get:CSProto.MovementInfo.FaceDir)
  return _internal_facedir();
}
inline void MovementInfo::_internal_set_facedir(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  facedir_ = value;
}
inline void MovementInfo::set_facedir(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_facedir(value);
  // @@protoc_insertion_point(field_set:CSProto.MovementInfo.FaceDir)
}

// int32 Time = 3;
inline void MovementInfo::clear_time() {
  time_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MovementInfo::_internal_time() const {
  return time_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MovementInfo::time() const {
  // @@protoc_insertion_point(field_get:CSProto.MovementInfo.Time)
  return _internal_time();
}
inline void MovementInfo::_internal_set_time(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  time_ = value;
}
inline void MovementInfo::set_time(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_time(value);
  // @@protoc_insertion_point(field_set:CSProto.MovementInfo.Time)
}

// int32 ServerTime = 4;
inline void MovementInfo::clear_servertime() {
  servertime_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MovementInfo::_internal_servertime() const {
  return servertime_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MovementInfo::servertime() const {
  // @@protoc_insertion_point(field_get:CSProto.MovementInfo.ServerTime)
  return _internal_servertime();
}
inline void MovementInfo::_internal_set_servertime(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  servertime_ = value;
}
inline void MovementInfo::set_servertime(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_servertime(value);
  // @@protoc_insertion_point(field_set:CSProto.MovementInfo.ServerTime)
}

// int32 MoveType = 5;
inline void MovementInfo::clear_movetype() {
  movetype_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MovementInfo::_internal_movetype() const {
  return movetype_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MovementInfo::movetype() const {
  // @@protoc_insertion_point(field_get:CSProto.MovementInfo.MoveType)
  return _internal_movetype();
}
inline void MovementInfo::_internal_set_movetype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  movetype_ = value;
}
inline void MovementInfo::set_movetype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_movetype(value);
  // @@protoc_insertion_point(field_set:CSProto.MovementInfo.MoveType)
}

// .CSProto.CSProtoPosInfo Position = 6;
inline bool MovementInfo::_internal_has_position() const {
  return this != internal_default_instance() && position_ != nullptr;
}
inline bool MovementInfo::has_position() const {
  return _internal_has_position();
}
inline void MovementInfo::clear_position() {
  if (GetArena() == nullptr && position_ != nullptr) {
    delete position_;
  }
  position_ = nullptr;
}
inline const ::CSProto::CSProtoPosInfo& MovementInfo::_internal_position() const {
  const ::CSProto::CSProtoPosInfo* p = position_;
  return p != nullptr ? *p : reinterpret_cast<const ::CSProto::CSProtoPosInfo&>(
      ::CSProto::_CSProtoPosInfo_default_instance_);
}
inline const ::CSProto::CSProtoPosInfo& MovementInfo::position() const {
  // @@protoc_insertion_point(field_get:CSProto.MovementInfo.Position)
  return _internal_position();
}
inline void MovementInfo::unsafe_arena_set_allocated_position(
    ::CSProto::CSProtoPosInfo* position) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(position_);
  }
  position_ = position;
  if (position) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CSProto.MovementInfo.Position)
}
inline ::CSProto::CSProtoPosInfo* MovementInfo::release_position() {
  
  ::CSProto::CSProtoPosInfo* temp = position_;
  position_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::CSProto::CSProtoPosInfo* MovementInfo::unsafe_arena_release_position() {
  // @@protoc_insertion_point(field_release:CSProto.MovementInfo.Position)
  
  ::CSProto::CSProtoPosInfo* temp = position_;
  position_ = nullptr;
  return temp;
}
inline ::CSProto::CSProtoPosInfo* MovementInfo::_internal_mutable_position() {
  
  if (position_ == nullptr) {
    auto* p = CreateMaybeMessage<::CSProto::CSProtoPosInfo>(GetArena());
    position_ = p;
  }
  return position_;
}
inline ::CSProto::CSProtoPosInfo* MovementInfo::mutable_position() {
  // @@protoc_insertion_point(field_mutable:CSProto.MovementInfo.Position)
  return _internal_mutable_position();
}
inline void MovementInfo::set_allocated_position(::CSProto::CSProtoPosInfo* position) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete position_;
  }
  if (position) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(position);
    if (message_arena != submessage_arena) {
      position = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, position, submessage_arena);
    }
    
  } else {
    
  }
  position_ = position;
  // @@protoc_insertion_point(field_set_allocated:CSProto.MovementInfo.Position)
}

// -------------------------------------------------------------------

// EnterRoomRoleInfo

// .CSProto.RoleBaseInfo Role = 1;
inline bool EnterRoomRoleInfo::_internal_has_role() const {
  return this != internal_default_instance() && role_ != nullptr;
}
inline bool EnterRoomRoleInfo::has_role() const {
  return _internal_has_role();
}
inline void EnterRoomRoleInfo::clear_role() {
  if (GetArena() == nullptr && role_ != nullptr) {
    delete role_;
  }
  role_ = nullptr;
}
inline const ::CSProto::RoleBaseInfo& EnterRoomRoleInfo::_internal_role() const {
  const ::CSProto::RoleBaseInfo* p = role_;
  return p != nullptr ? *p : reinterpret_cast<const ::CSProto::RoleBaseInfo&>(
      ::CSProto::_RoleBaseInfo_default_instance_);
}
inline const ::CSProto::RoleBaseInfo& EnterRoomRoleInfo::role() const {
  // @@protoc_insertion_point(field_get:CSProto.EnterRoomRoleInfo.Role)
  return _internal_role();
}
inline void EnterRoomRoleInfo::unsafe_arena_set_allocated_role(
    ::CSProto::RoleBaseInfo* role) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(role_);
  }
  role_ = role;
  if (role) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CSProto.EnterRoomRoleInfo.Role)
}
inline ::CSProto::RoleBaseInfo* EnterRoomRoleInfo::release_role() {
  
  ::CSProto::RoleBaseInfo* temp = role_;
  role_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::CSProto::RoleBaseInfo* EnterRoomRoleInfo::unsafe_arena_release_role() {
  // @@protoc_insertion_point(field_release:CSProto.EnterRoomRoleInfo.Role)
  
  ::CSProto::RoleBaseInfo* temp = role_;
  role_ = nullptr;
  return temp;
}
inline ::CSProto::RoleBaseInfo* EnterRoomRoleInfo::_internal_mutable_role() {
  
  if (role_ == nullptr) {
    auto* p = CreateMaybeMessage<::CSProto::RoleBaseInfo>(GetArena());
    role_ = p;
  }
  return role_;
}
inline ::CSProto::RoleBaseInfo* EnterRoomRoleInfo::mutable_role() {
  // @@protoc_insertion_point(field_mutable:CSProto.EnterRoomRoleInfo.Role)
  return _internal_mutable_role();
}
inline void EnterRoomRoleInfo::set_allocated_role(::CSProto::RoleBaseInfo* role) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete role_;
  }
  if (role) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(role);
    if (message_arena != submessage_arena) {
      role = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, role, submessage_arena);
    }
    
  } else {
    
  }
  role_ = role;
  // @@protoc_insertion_point(field_set_allocated:CSProto.EnterRoomRoleInfo.Role)
}

// .CSProto.MovementInfo Movement = 2;
inline bool EnterRoomRoleInfo::_internal_has_movement() const {
  return this != internal_default_instance() && movement_ != nullptr;
}
inline bool EnterRoomRoleInfo::has_movement() const {
  return _internal_has_movement();
}
inline void EnterRoomRoleInfo::clear_movement() {
  if (GetArena() == nullptr && movement_ != nullptr) {
    delete movement_;
  }
  movement_ = nullptr;
}
inline const ::CSProto::MovementInfo& EnterRoomRoleInfo::_internal_movement() const {
  const ::CSProto::MovementInfo* p = movement_;
  return p != nullptr ? *p : reinterpret_cast<const ::CSProto::MovementInfo&>(
      ::CSProto::_MovementInfo_default_instance_);
}
inline const ::CSProto::MovementInfo& EnterRoomRoleInfo::movement() const {
  // @@protoc_insertion_point(field_get:CSProto.EnterRoomRoleInfo.Movement)
  return _internal_movement();
}
inline void EnterRoomRoleInfo::unsafe_arena_set_allocated_movement(
    ::CSProto::MovementInfo* movement) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(movement_);
  }
  movement_ = movement;
  if (movement) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CSProto.EnterRoomRoleInfo.Movement)
}
inline ::CSProto::MovementInfo* EnterRoomRoleInfo::release_movement() {
  
  ::CSProto::MovementInfo* temp = movement_;
  movement_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::CSProto::MovementInfo* EnterRoomRoleInfo::unsafe_arena_release_movement() {
  // @@protoc_insertion_point(field_release:CSProto.EnterRoomRoleInfo.Movement)
  
  ::CSProto::MovementInfo* temp = movement_;
  movement_ = nullptr;
  return temp;
}
inline ::CSProto::MovementInfo* EnterRoomRoleInfo::_internal_mutable_movement() {
  
  if (movement_ == nullptr) {
    auto* p = CreateMaybeMessage<::CSProto::MovementInfo>(GetArena());
    movement_ = p;
  }
  return movement_;
}
inline ::CSProto::MovementInfo* EnterRoomRoleInfo::mutable_movement() {
  // @@protoc_insertion_point(field_mutable:CSProto.EnterRoomRoleInfo.Movement)
  return _internal_mutable_movement();
}
inline void EnterRoomRoleInfo::set_allocated_movement(::CSProto::MovementInfo* movement) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete movement_;
  }
  if (movement) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(movement);
    if (message_arena != submessage_arena) {
      movement = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, movement, submessage_arena);
    }
    
  } else {
    
  }
  movement_ = movement;
  // @@protoc_insertion_point(field_set_allocated:CSProto.EnterRoomRoleInfo.Movement)
}

// -------------------------------------------------------------------

// MoveRoleInfo

// uint64 UserID = 1;
inline void MoveRoleInfo::clear_userid() {
  userid_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MoveRoleInfo::_internal_userid() const {
  return userid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MoveRoleInfo::userid() const {
  // @@protoc_insertion_point(field_get:CSProto.MoveRoleInfo.UserID)
  return _internal_userid();
}
inline void MoveRoleInfo::_internal_set_userid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  userid_ = value;
}
inline void MoveRoleInfo::set_userid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_userid(value);
  // @@protoc_insertion_point(field_set:CSProto.MoveRoleInfo.UserID)
}

// .CSProto.MovementInfo Movement = 2;
inline bool MoveRoleInfo::_internal_has_movement() const {
  return this != internal_default_instance() && movement_ != nullptr;
}
inline bool MoveRoleInfo::has_movement() const {
  return _internal_has_movement();
}
inline void MoveRoleInfo::clear_movement() {
  if (GetArena() == nullptr && movement_ != nullptr) {
    delete movement_;
  }
  movement_ = nullptr;
}
inline const ::CSProto::MovementInfo& MoveRoleInfo::_internal_movement() const {
  const ::CSProto::MovementInfo* p = movement_;
  return p != nullptr ? *p : reinterpret_cast<const ::CSProto::MovementInfo&>(
      ::CSProto::_MovementInfo_default_instance_);
}
inline const ::CSProto::MovementInfo& MoveRoleInfo::movement() const {
  // @@protoc_insertion_point(field_get:CSProto.MoveRoleInfo.Movement)
  return _internal_movement();
}
inline void MoveRoleInfo::unsafe_arena_set_allocated_movement(
    ::CSProto::MovementInfo* movement) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(movement_);
  }
  movement_ = movement;
  if (movement) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CSProto.MoveRoleInfo.Movement)
}
inline ::CSProto::MovementInfo* MoveRoleInfo::release_movement() {
  
  ::CSProto::MovementInfo* temp = movement_;
  movement_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::CSProto::MovementInfo* MoveRoleInfo::unsafe_arena_release_movement() {
  // @@protoc_insertion_point(field_release:CSProto.MoveRoleInfo.Movement)
  
  ::CSProto::MovementInfo* temp = movement_;
  movement_ = nullptr;
  return temp;
}
inline ::CSProto::MovementInfo* MoveRoleInfo::_internal_mutable_movement() {
  
  if (movement_ == nullptr) {
    auto* p = CreateMaybeMessage<::CSProto::MovementInfo>(GetArena());
    movement_ = p;
  }
  return movement_;
}
inline ::CSProto::MovementInfo* MoveRoleInfo::mutable_movement() {
  // @@protoc_insertion_point(field_mutable:CSProto.MoveRoleInfo.Movement)
  return _internal_mutable_movement();
}
inline void MoveRoleInfo::set_allocated_movement(::CSProto::MovementInfo* movement) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete movement_;
  }
  if (movement) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(movement);
    if (message_arena != submessage_arena) {
      movement = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, movement, submessage_arena);
    }
    
  } else {
    
  }
  movement_ = movement;
  // @@protoc_insertion_point(field_set_allocated:CSProto.MoveRoleInfo.Movement)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace CSProto

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::CSProto::MsgID> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::CSProto::MsgID>() {
  return ::CSProto::MsgID_descriptor();
}
template <> struct is_proto_enum< ::CSProto::ErrorCodeID> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::CSProto::ErrorCodeID>() {
  return ::CSProto::ErrorCodeID_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_CSBase_2eproto
