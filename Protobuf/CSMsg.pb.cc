// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: CSMsg.proto

#include "CSMsg.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_CSBase_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_EnterRoomRoleInfo_CSBase_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_CSBase_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MoveRoleInfo_CSBase_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_CSBase_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MovementInfo_CSBase_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_CSMsg_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TestAck_TestMapEntry_DoNotUse_CSMsg_2eproto;
namespace CSProto {
class SYS_PINGDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SYS_PING> _instance;
} _SYS_PING_default_instance_;
class SYS_PONGDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SYS_PONG> _instance;
} _SYS_PONG_default_instance_;
class TestReqDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TestReq> _instance;
} _TestReq_default_instance_;
class TestAck_TestMapEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TestAck_TestMapEntry_DoNotUse> _instance;
} _TestAck_TestMapEntry_DoNotUse_default_instance_;
class TestAckDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TestAck> _instance;
} _TestAck_default_instance_;
class ErrorAckDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ErrorAck> _instance;
} _ErrorAck_default_instance_;
class LoginReqDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LoginReq> _instance;
} _LoginReq_default_instance_;
class LoginAckDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LoginAck> _instance;
} _LoginAck_default_instance_;
class EnterRoomReqDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<EnterRoomReq> _instance;
} _EnterRoomReq_default_instance_;
class EnterRoomAckDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<EnterRoomAck> _instance;
} _EnterRoomAck_default_instance_;
class EnterRoomNtfDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<EnterRoomNtf> _instance;
} _EnterRoomNtf_default_instance_;
class MoveReqDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MoveReq> _instance;
} _MoveReq_default_instance_;
class MoveAckDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MoveAck> _instance;
} _MoveAck_default_instance_;
class MoveNtfDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MoveNtf> _instance;
} _MoveNtf_default_instance_;
}  // namespace CSProto
static void InitDefaultsscc_info_EnterRoomAck_CSMsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::CSProto::_EnterRoomAck_default_instance_;
    new (ptr) ::CSProto::EnterRoomAck();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_EnterRoomAck_CSMsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_EnterRoomAck_CSMsg_2eproto}, {}};

static void InitDefaultsscc_info_EnterRoomNtf_CSMsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::CSProto::_EnterRoomNtf_default_instance_;
    new (ptr) ::CSProto::EnterRoomNtf();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_EnterRoomNtf_CSMsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_EnterRoomNtf_CSMsg_2eproto}, {
      &scc_info_EnterRoomRoleInfo_CSBase_2eproto.base,}};

static void InitDefaultsscc_info_EnterRoomReq_CSMsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::CSProto::_EnterRoomReq_default_instance_;
    new (ptr) ::CSProto::EnterRoomReq();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_EnterRoomReq_CSMsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_EnterRoomReq_CSMsg_2eproto}, {}};

static void InitDefaultsscc_info_ErrorAck_CSMsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::CSProto::_ErrorAck_default_instance_;
    new (ptr) ::CSProto::ErrorAck();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ErrorAck_CSMsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ErrorAck_CSMsg_2eproto}, {}};

static void InitDefaultsscc_info_LoginAck_CSMsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::CSProto::_LoginAck_default_instance_;
    new (ptr) ::CSProto::LoginAck();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LoginAck_CSMsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_LoginAck_CSMsg_2eproto}, {}};

static void InitDefaultsscc_info_LoginReq_CSMsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::CSProto::_LoginReq_default_instance_;
    new (ptr) ::CSProto::LoginReq();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LoginReq_CSMsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_LoginReq_CSMsg_2eproto}, {}};

static void InitDefaultsscc_info_MoveAck_CSMsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::CSProto::_MoveAck_default_instance_;
    new (ptr) ::CSProto::MoveAck();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MoveAck_CSMsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_MoveAck_CSMsg_2eproto}, {
      &scc_info_MovementInfo_CSBase_2eproto.base,}};

static void InitDefaultsscc_info_MoveNtf_CSMsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::CSProto::_MoveNtf_default_instance_;
    new (ptr) ::CSProto::MoveNtf();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MoveNtf_CSMsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_MoveNtf_CSMsg_2eproto}, {
      &scc_info_MoveRoleInfo_CSBase_2eproto.base,}};

static void InitDefaultsscc_info_MoveReq_CSMsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::CSProto::_MoveReq_default_instance_;
    new (ptr) ::CSProto::MoveReq();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MoveReq_CSMsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_MoveReq_CSMsg_2eproto}, {
      &scc_info_MovementInfo_CSBase_2eproto.base,}};

static void InitDefaultsscc_info_SYS_PING_CSMsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::CSProto::_SYS_PING_default_instance_;
    new (ptr) ::CSProto::SYS_PING();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SYS_PING_CSMsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SYS_PING_CSMsg_2eproto}, {}};

static void InitDefaultsscc_info_SYS_PONG_CSMsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::CSProto::_SYS_PONG_default_instance_;
    new (ptr) ::CSProto::SYS_PONG();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SYS_PONG_CSMsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SYS_PONG_CSMsg_2eproto}, {}};

static void InitDefaultsscc_info_TestAck_CSMsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::CSProto::_TestAck_default_instance_;
    new (ptr) ::CSProto::TestAck();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TestAck_CSMsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_TestAck_CSMsg_2eproto}, {
      &scc_info_TestAck_TestMapEntry_DoNotUse_CSMsg_2eproto.base,}};

static void InitDefaultsscc_info_TestAck_TestMapEntry_DoNotUse_CSMsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::CSProto::_TestAck_TestMapEntry_DoNotUse_default_instance_;
    new (ptr) ::CSProto::TestAck_TestMapEntry_DoNotUse();
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TestAck_TestMapEntry_DoNotUse_CSMsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TestAck_TestMapEntry_DoNotUse_CSMsg_2eproto}, {}};

static void InitDefaultsscc_info_TestReq_CSMsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::CSProto::_TestReq_default_instance_;
    new (ptr) ::CSProto::TestReq();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TestReq_CSMsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TestReq_CSMsg_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_CSMsg_2eproto[14];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_CSMsg_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_CSMsg_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_CSMsg_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CSProto::SYS_PING, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CSProto::SYS_PING, ts_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CSProto::SYS_PONG, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CSProto::SYS_PONG, ts_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CSProto::TestReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CSProto::TestReq, data_),
  PROTOBUF_FIELD_OFFSET(::CSProto::TestAck_TestMapEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CSProto::TestAck_TestMapEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CSProto::TestAck_TestMapEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::CSProto::TestAck_TestMapEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CSProto::TestAck, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CSProto::TestAck, err_),
  PROTOBUF_FIELD_OFFSET(::CSProto::TestAck, testdata_),
  PROTOBUF_FIELD_OFFSET(::CSProto::TestAck, testmap_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CSProto::ErrorAck, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CSProto::ErrorAck, id_),
  PROTOBUF_FIELD_OFFSET(::CSProto::ErrorAck, error_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CSProto::LoginReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CSProto::LoginReq, userid_),
  PROTOBUF_FIELD_OFFSET(::CSProto::LoginReq, username_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CSProto::LoginAck, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CSProto::LoginAck, err_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CSProto::EnterRoomReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CSProto::EnterRoomAck, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CSProto::EnterRoomAck, err_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CSProto::EnterRoomNtf, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CSProto::EnterRoomNtf, rolelist_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CSProto::MoveReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CSProto::MoveReq, movement_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CSProto::MoveAck, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CSProto::MoveAck, movement_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CSProto::MoveNtf, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CSProto::MoveNtf, moverole_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::CSProto::SYS_PING)},
  { 6, -1, sizeof(::CSProto::SYS_PONG)},
  { 12, -1, sizeof(::CSProto::TestReq)},
  { 18, 25, sizeof(::CSProto::TestAck_TestMapEntry_DoNotUse)},
  { 27, -1, sizeof(::CSProto::TestAck)},
  { 35, -1, sizeof(::CSProto::ErrorAck)},
  { 42, -1, sizeof(::CSProto::LoginReq)},
  { 49, -1, sizeof(::CSProto::LoginAck)},
  { 55, -1, sizeof(::CSProto::EnterRoomReq)},
  { 60, -1, sizeof(::CSProto::EnterRoomAck)},
  { 66, -1, sizeof(::CSProto::EnterRoomNtf)},
  { 72, -1, sizeof(::CSProto::MoveReq)},
  { 78, -1, sizeof(::CSProto::MoveAck)},
  { 84, -1, sizeof(::CSProto::MoveNtf)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::CSProto::_SYS_PING_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::CSProto::_SYS_PONG_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::CSProto::_TestReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::CSProto::_TestAck_TestMapEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::CSProto::_TestAck_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::CSProto::_ErrorAck_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::CSProto::_LoginReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::CSProto::_LoginAck_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::CSProto::_EnterRoomReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::CSProto::_EnterRoomAck_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::CSProto::_EnterRoomNtf_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::CSProto::_MoveReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::CSProto::_MoveAck_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::CSProto::_MoveNtf_default_instance_),
};

const char descriptor_table_protodef_CSMsg_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\013CSMsg.proto\022\007CSProto\032\014CSBase.proto\"\026\n\010"
  "SYS_PING\022\n\n\002ts\030\001 \001(\003\"\026\n\010SYS_PONG\022\n\n\002ts\030\001"
  " \001(\003\"\027\n\007TestReq\022\014\n\004Data\030\001 \001(\t\"\236\001\n\007TestAc"
  "k\022!\n\003Err\030\001 \001(\0162\024.CSProto.ErrorCodeID\022\020\n\010"
  "TestData\030\002 \001(\t\022.\n\007TestMap\030\003 \003(\0132\035.CSProt"
  "o.TestAck.TestMapEntry\032.\n\014TestMapEntry\022\013"
  "\n\003key\030\001 \001(\r\022\r\n\005value\030\002 \001(\005:\0028\001\"K\n\010ErrorA"
  "ck\022\032\n\002ID\030\001 \001(\0162\016.CSProto.MsgID\022#\n\005Error\030"
  "\002 \001(\0162\024.CSProto.ErrorCodeID\",\n\010LoginReq\022"
  "\016\n\006UserId\030\001 \001(\004\022\020\n\010Username\030\002 \001(\t\"-\n\010Log"
  "inAck\022!\n\003Err\030\001 \001(\0162\024.CSProto.ErrorCodeID"
  "\"\016\n\014EnterRoomReq\"1\n\014EnterRoomAck\022!\n\003Err\030"
  "\001 \001(\0162\024.CSProto.ErrorCodeID\"<\n\014EnterRoom"
  "Ntf\022,\n\010RoleList\030\001 \003(\0132\032.CSProto.EnterRoo"
  "mRoleInfo\"2\n\007MoveReq\022\'\n\010Movement\030\001 \001(\0132\025"
  ".CSProto.MovementInfo\"2\n\007MoveAck\022\'\n\010Move"
  "ment\030\001 \001(\0132\025.CSProto.MovementInfo\"2\n\007Mov"
  "eNtf\022\'\n\010MoveRole\030\001 \001(\0132\025.CSProto.MoveRol"
  "eInfob\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_CSMsg_2eproto_deps[1] = {
  &::descriptor_table_CSBase_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_CSMsg_2eproto_sccs[14] = {
  &scc_info_EnterRoomAck_CSMsg_2eproto.base,
  &scc_info_EnterRoomNtf_CSMsg_2eproto.base,
  &scc_info_EnterRoomReq_CSMsg_2eproto.base,
  &scc_info_ErrorAck_CSMsg_2eproto.base,
  &scc_info_LoginAck_CSMsg_2eproto.base,
  &scc_info_LoginReq_CSMsg_2eproto.base,
  &scc_info_MoveAck_CSMsg_2eproto.base,
  &scc_info_MoveNtf_CSMsg_2eproto.base,
  &scc_info_MoveReq_CSMsg_2eproto.base,
  &scc_info_SYS_PING_CSMsg_2eproto.base,
  &scc_info_SYS_PONG_CSMsg_2eproto.base,
  &scc_info_TestAck_CSMsg_2eproto.base,
  &scc_info_TestAck_TestMapEntry_DoNotUse_CSMsg_2eproto.base,
  &scc_info_TestReq_CSMsg_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_CSMsg_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_CSMsg_2eproto = {
  false, false, descriptor_table_protodef_CSMsg_2eproto, "CSMsg.proto", 733,
  &descriptor_table_CSMsg_2eproto_once, descriptor_table_CSMsg_2eproto_sccs, descriptor_table_CSMsg_2eproto_deps, 14, 1,
  schemas, file_default_instances, TableStruct_CSMsg_2eproto::offsets,
  file_level_metadata_CSMsg_2eproto, 14, file_level_enum_descriptors_CSMsg_2eproto, file_level_service_descriptors_CSMsg_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_CSMsg_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_CSMsg_2eproto)), true);
namespace CSProto {

// ===================================================================

class SYS_PING::_Internal {
 public:
};

SYS_PING::SYS_PING(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CSProto.SYS_PING)
}
SYS_PING::SYS_PING(const SYS_PING& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ts_ = from.ts_;
  // @@protoc_insertion_point(copy_constructor:CSProto.SYS_PING)
}

void SYS_PING::SharedCtor() {
  ts_ = PROTOBUF_LONGLONG(0);
}

SYS_PING::~SYS_PING() {
  // @@protoc_insertion_point(destructor:CSProto.SYS_PING)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SYS_PING::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SYS_PING::ArenaDtor(void* object) {
  SYS_PING* _this = reinterpret_cast< SYS_PING* >(object);
  (void)_this;
}
void SYS_PING::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SYS_PING::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SYS_PING& SYS_PING::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SYS_PING_CSMsg_2eproto.base);
  return *internal_default_instance();
}


void SYS_PING::Clear() {
// @@protoc_insertion_point(message_clear_start:CSProto.SYS_PING)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ts_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SYS_PING::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 ts = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ts_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SYS_PING::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CSProto.SYS_PING)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 ts = 1;
  if (this->ts() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_ts(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSProto.SYS_PING)
  return target;
}

size_t SYS_PING::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CSProto.SYS_PING)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 ts = 1;
  if (this->ts() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_ts());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SYS_PING::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CSProto.SYS_PING)
  GOOGLE_DCHECK_NE(&from, this);
  const SYS_PING* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SYS_PING>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CSProto.SYS_PING)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CSProto.SYS_PING)
    MergeFrom(*source);
  }
}

void SYS_PING::MergeFrom(const SYS_PING& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CSProto.SYS_PING)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.ts() != 0) {
    _internal_set_ts(from._internal_ts());
  }
}

void SYS_PING::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CSProto.SYS_PING)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SYS_PING::CopyFrom(const SYS_PING& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CSProto.SYS_PING)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SYS_PING::IsInitialized() const {
  return true;
}

void SYS_PING::InternalSwap(SYS_PING* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(ts_, other->ts_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SYS_PING::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SYS_PONG::_Internal {
 public:
};

SYS_PONG::SYS_PONG(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CSProto.SYS_PONG)
}
SYS_PONG::SYS_PONG(const SYS_PONG& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ts_ = from.ts_;
  // @@protoc_insertion_point(copy_constructor:CSProto.SYS_PONG)
}

void SYS_PONG::SharedCtor() {
  ts_ = PROTOBUF_LONGLONG(0);
}

SYS_PONG::~SYS_PONG() {
  // @@protoc_insertion_point(destructor:CSProto.SYS_PONG)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SYS_PONG::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SYS_PONG::ArenaDtor(void* object) {
  SYS_PONG* _this = reinterpret_cast< SYS_PONG* >(object);
  (void)_this;
}
void SYS_PONG::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SYS_PONG::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SYS_PONG& SYS_PONG::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SYS_PONG_CSMsg_2eproto.base);
  return *internal_default_instance();
}


void SYS_PONG::Clear() {
// @@protoc_insertion_point(message_clear_start:CSProto.SYS_PONG)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ts_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SYS_PONG::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 ts = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ts_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SYS_PONG::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CSProto.SYS_PONG)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 ts = 1;
  if (this->ts() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_ts(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSProto.SYS_PONG)
  return target;
}

size_t SYS_PONG::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CSProto.SYS_PONG)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 ts = 1;
  if (this->ts() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_ts());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SYS_PONG::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CSProto.SYS_PONG)
  GOOGLE_DCHECK_NE(&from, this);
  const SYS_PONG* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SYS_PONG>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CSProto.SYS_PONG)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CSProto.SYS_PONG)
    MergeFrom(*source);
  }
}

void SYS_PONG::MergeFrom(const SYS_PONG& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CSProto.SYS_PONG)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.ts() != 0) {
    _internal_set_ts(from._internal_ts());
  }
}

void SYS_PONG::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CSProto.SYS_PONG)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SYS_PONG::CopyFrom(const SYS_PONG& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CSProto.SYS_PONG)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SYS_PONG::IsInitialized() const {
  return true;
}

void SYS_PONG::InternalSwap(SYS_PONG* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(ts_, other->ts_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SYS_PONG::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class TestReq::_Internal {
 public:
};

TestReq::TestReq(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CSProto.TestReq)
}
TestReq::TestReq(const TestReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_data().empty()) {
    data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_data(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:CSProto.TestReq)
}

void TestReq::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TestReq_CSMsg_2eproto.base);
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

TestReq::~TestReq() {
  // @@protoc_insertion_point(destructor:CSProto.TestReq)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TestReq::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TestReq::ArenaDtor(void* object) {
  TestReq* _this = reinterpret_cast< TestReq* >(object);
  (void)_this;
}
void TestReq::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TestReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TestReq& TestReq::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TestReq_CSMsg_2eproto.base);
  return *internal_default_instance();
}


void TestReq::Clear() {
// @@protoc_insertion_point(message_clear_start:CSProto.TestReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TestReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string Data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_data();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CSProto.TestReq.Data"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TestReq::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CSProto.TestReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string Data = 1;
  if (this->data().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_data().data(), static_cast<int>(this->_internal_data().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "CSProto.TestReq.Data");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSProto.TestReq)
  return target;
}

size_t TestReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CSProto.TestReq)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string Data = 1;
  if (this->data().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_data());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TestReq::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CSProto.TestReq)
  GOOGLE_DCHECK_NE(&from, this);
  const TestReq* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TestReq>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CSProto.TestReq)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CSProto.TestReq)
    MergeFrom(*source);
  }
}

void TestReq::MergeFrom(const TestReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CSProto.TestReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.data().size() > 0) {
    _internal_set_data(from._internal_data());
  }
}

void TestReq::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CSProto.TestReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TestReq::CopyFrom(const TestReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CSProto.TestReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestReq::IsInitialized() const {
  return true;
}

void TestReq::InternalSwap(TestReq* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  data_.Swap(&other->data_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata TestReq::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

TestAck_TestMapEntry_DoNotUse::TestAck_TestMapEntry_DoNotUse() {}
TestAck_TestMapEntry_DoNotUse::TestAck_TestMapEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void TestAck_TestMapEntry_DoNotUse::MergeFrom(const TestAck_TestMapEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata TestAck_TestMapEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void TestAck_TestMapEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

class TestAck::_Internal {
 public:
};

TestAck::TestAck(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  testmap_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CSProto.TestAck)
}
TestAck::TestAck(const TestAck& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  testmap_.MergeFrom(from.testmap_);
  testdata_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_testdata().empty()) {
    testdata_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_testdata(), 
      GetArena());
  }
  err_ = from.err_;
  // @@protoc_insertion_point(copy_constructor:CSProto.TestAck)
}

void TestAck::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TestAck_CSMsg_2eproto.base);
  testdata_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  err_ = 0;
}

TestAck::~TestAck() {
  // @@protoc_insertion_point(destructor:CSProto.TestAck)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TestAck::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  testdata_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TestAck::ArenaDtor(void* object) {
  TestAck* _this = reinterpret_cast< TestAck* >(object);
  (void)_this;
}
void TestAck::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TestAck::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TestAck& TestAck::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TestAck_CSMsg_2eproto.base);
  return *internal_default_instance();
}


void TestAck::Clear() {
// @@protoc_insertion_point(message_clear_start:CSProto.TestAck)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  testmap_.Clear();
  testdata_.ClearToEmpty();
  err_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TestAck::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .CSProto.ErrorCodeID Err = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_err(static_cast<::CSProto::ErrorCodeID>(val));
        } else goto handle_unusual;
        continue;
      // string TestData = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_testdata();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CSProto.TestAck.TestData"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // map<uint32, int32> TestMap = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&testmap_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TestAck::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CSProto.TestAck)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .CSProto.ErrorCodeID Err = 1;
  if (this->err() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_err(), target);
  }

  // string TestData = 2;
  if (this->testdata().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_testdata().data(), static_cast<int>(this->_internal_testdata().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "CSProto.TestAck.TestData");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_testdata(), target);
  }

  // map<uint32, int32> TestMap = 3;
  if (!this->_internal_testmap().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::int32 >::const_pointer
        ConstPtr;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::SortItem< ::PROTOBUF_NAMESPACE_ID::uint32, ConstPtr > SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByFirstField<SortItem> Less;

    if (stream->IsSerializationDeterministic() &&
        this->_internal_testmap().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_testmap().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::int32 >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::int32 >::const_iterator
          it = this->_internal_testmap().begin();
          it != this->_internal_testmap().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = TestAck_TestMapEntry_DoNotUse::Funcs::InternalSerialize(3, items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second, target, stream);
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::int32 >::const_iterator
          it = this->_internal_testmap().begin();
          it != this->_internal_testmap().end(); ++it) {
        target = TestAck_TestMapEntry_DoNotUse::Funcs::InternalSerialize(3, it->first, it->second, target, stream);
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSProto.TestAck)
  return target;
}

size_t TestAck::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CSProto.TestAck)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<uint32, int32> TestMap = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_testmap_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::int32 >::const_iterator
      it = this->_internal_testmap().begin();
      it != this->_internal_testmap().end(); ++it) {
    total_size += TestAck_TestMapEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // string TestData = 2;
  if (this->testdata().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_testdata());
  }

  // .CSProto.ErrorCodeID Err = 1;
  if (this->err() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_err());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TestAck::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CSProto.TestAck)
  GOOGLE_DCHECK_NE(&from, this);
  const TestAck* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TestAck>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CSProto.TestAck)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CSProto.TestAck)
    MergeFrom(*source);
  }
}

void TestAck::MergeFrom(const TestAck& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CSProto.TestAck)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  testmap_.MergeFrom(from.testmap_);
  if (from.testdata().size() > 0) {
    _internal_set_testdata(from._internal_testdata());
  }
  if (from.err() != 0) {
    _internal_set_err(from._internal_err());
  }
}

void TestAck::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CSProto.TestAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TestAck::CopyFrom(const TestAck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CSProto.TestAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestAck::IsInitialized() const {
  return true;
}

void TestAck::InternalSwap(TestAck* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  testmap_.Swap(&other->testmap_);
  testdata_.Swap(&other->testdata_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(err_, other->err_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TestAck::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ErrorAck::_Internal {
 public:
};

ErrorAck::ErrorAck(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CSProto.ErrorAck)
}
ErrorAck::ErrorAck(const ErrorAck& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&error_) -
    reinterpret_cast<char*>(&id_)) + sizeof(error_));
  // @@protoc_insertion_point(copy_constructor:CSProto.ErrorAck)
}

void ErrorAck::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&id_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&error_) -
      reinterpret_cast<char*>(&id_)) + sizeof(error_));
}

ErrorAck::~ErrorAck() {
  // @@protoc_insertion_point(destructor:CSProto.ErrorAck)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ErrorAck::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ErrorAck::ArenaDtor(void* object) {
  ErrorAck* _this = reinterpret_cast< ErrorAck* >(object);
  (void)_this;
}
void ErrorAck::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ErrorAck::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ErrorAck& ErrorAck::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ErrorAck_CSMsg_2eproto.base);
  return *internal_default_instance();
}


void ErrorAck::Clear() {
// @@protoc_insertion_point(message_clear_start:CSProto.ErrorAck)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&error_) -
      reinterpret_cast<char*>(&id_)) + sizeof(error_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ErrorAck::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .CSProto.MsgID ID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_id(static_cast<::CSProto::MsgID>(val));
        } else goto handle_unusual;
        continue;
      // .CSProto.ErrorCodeID Error = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_error(static_cast<::CSProto::ErrorCodeID>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ErrorAck::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CSProto.ErrorAck)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .CSProto.MsgID ID = 1;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_id(), target);
  }

  // .CSProto.ErrorCodeID Error = 2;
  if (this->error() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_error(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSProto.ErrorAck)
  return target;
}

size_t ErrorAck::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CSProto.ErrorAck)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .CSProto.MsgID ID = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_id());
  }

  // .CSProto.ErrorCodeID Error = 2;
  if (this->error() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_error());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ErrorAck::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CSProto.ErrorAck)
  GOOGLE_DCHECK_NE(&from, this);
  const ErrorAck* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ErrorAck>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CSProto.ErrorAck)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CSProto.ErrorAck)
    MergeFrom(*source);
  }
}

void ErrorAck::MergeFrom(const ErrorAck& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CSProto.ErrorAck)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.error() != 0) {
    _internal_set_error(from._internal_error());
  }
}

void ErrorAck::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CSProto.ErrorAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ErrorAck::CopyFrom(const ErrorAck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CSProto.ErrorAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ErrorAck::IsInitialized() const {
  return true;
}

void ErrorAck::InternalSwap(ErrorAck* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ErrorAck, error_)
      + sizeof(ErrorAck::error_)
      - PROTOBUF_FIELD_OFFSET(ErrorAck, id_)>(
          reinterpret_cast<char*>(&id_),
          reinterpret_cast<char*>(&other->id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ErrorAck::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class LoginReq::_Internal {
 public:
};

LoginReq::LoginReq(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CSProto.LoginReq)
}
LoginReq::LoginReq(const LoginReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  username_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_username().empty()) {
    username_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_username(), 
      GetArena());
  }
  userid_ = from.userid_;
  // @@protoc_insertion_point(copy_constructor:CSProto.LoginReq)
}

void LoginReq::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LoginReq_CSMsg_2eproto.base);
  username_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  userid_ = PROTOBUF_ULONGLONG(0);
}

LoginReq::~LoginReq() {
  // @@protoc_insertion_point(destructor:CSProto.LoginReq)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LoginReq::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  username_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void LoginReq::ArenaDtor(void* object) {
  LoginReq* _this = reinterpret_cast< LoginReq* >(object);
  (void)_this;
}
void LoginReq::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LoginReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LoginReq& LoginReq::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LoginReq_CSMsg_2eproto.base);
  return *internal_default_instance();
}


void LoginReq::Clear() {
// @@protoc_insertion_point(message_clear_start:CSProto.LoginReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  username_.ClearToEmpty();
  userid_ = PROTOBUF_ULONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LoginReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 UserId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          userid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string Username = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_username();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CSProto.LoginReq.Username"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LoginReq::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CSProto.LoginReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 UserId = 1;
  if (this->userid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_userid(), target);
  }

  // string Username = 2;
  if (this->username().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_username().data(), static_cast<int>(this->_internal_username().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "CSProto.LoginReq.Username");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_username(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSProto.LoginReq)
  return target;
}

size_t LoginReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CSProto.LoginReq)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string Username = 2;
  if (this->username().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_username());
  }

  // uint64 UserId = 1;
  if (this->userid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_userid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LoginReq::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CSProto.LoginReq)
  GOOGLE_DCHECK_NE(&from, this);
  const LoginReq* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LoginReq>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CSProto.LoginReq)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CSProto.LoginReq)
    MergeFrom(*source);
  }
}

void LoginReq::MergeFrom(const LoginReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CSProto.LoginReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.username().size() > 0) {
    _internal_set_username(from._internal_username());
  }
  if (from.userid() != 0) {
    _internal_set_userid(from._internal_userid());
  }
}

void LoginReq::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CSProto.LoginReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoginReq::CopyFrom(const LoginReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CSProto.LoginReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoginReq::IsInitialized() const {
  return true;
}

void LoginReq::InternalSwap(LoginReq* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  username_.Swap(&other->username_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(userid_, other->userid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LoginReq::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class LoginAck::_Internal {
 public:
};

LoginAck::LoginAck(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CSProto.LoginAck)
}
LoginAck::LoginAck(const LoginAck& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  err_ = from.err_;
  // @@protoc_insertion_point(copy_constructor:CSProto.LoginAck)
}

void LoginAck::SharedCtor() {
  err_ = 0;
}

LoginAck::~LoginAck() {
  // @@protoc_insertion_point(destructor:CSProto.LoginAck)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LoginAck::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void LoginAck::ArenaDtor(void* object) {
  LoginAck* _this = reinterpret_cast< LoginAck* >(object);
  (void)_this;
}
void LoginAck::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LoginAck::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LoginAck& LoginAck::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LoginAck_CSMsg_2eproto.base);
  return *internal_default_instance();
}


void LoginAck::Clear() {
// @@protoc_insertion_point(message_clear_start:CSProto.LoginAck)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  err_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LoginAck::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .CSProto.ErrorCodeID Err = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_err(static_cast<::CSProto::ErrorCodeID>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LoginAck::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CSProto.LoginAck)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .CSProto.ErrorCodeID Err = 1;
  if (this->err() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_err(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSProto.LoginAck)
  return target;
}

size_t LoginAck::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CSProto.LoginAck)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .CSProto.ErrorCodeID Err = 1;
  if (this->err() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_err());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LoginAck::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CSProto.LoginAck)
  GOOGLE_DCHECK_NE(&from, this);
  const LoginAck* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LoginAck>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CSProto.LoginAck)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CSProto.LoginAck)
    MergeFrom(*source);
  }
}

void LoginAck::MergeFrom(const LoginAck& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CSProto.LoginAck)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.err() != 0) {
    _internal_set_err(from._internal_err());
  }
}

void LoginAck::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CSProto.LoginAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoginAck::CopyFrom(const LoginAck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CSProto.LoginAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoginAck::IsInitialized() const {
  return true;
}

void LoginAck::InternalSwap(LoginAck* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(err_, other->err_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LoginAck::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class EnterRoomReq::_Internal {
 public:
};

EnterRoomReq::EnterRoomReq(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CSProto.EnterRoomReq)
}
EnterRoomReq::EnterRoomReq(const EnterRoomReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CSProto.EnterRoomReq)
}

void EnterRoomReq::SharedCtor() {
}

EnterRoomReq::~EnterRoomReq() {
  // @@protoc_insertion_point(destructor:CSProto.EnterRoomReq)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void EnterRoomReq::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void EnterRoomReq::ArenaDtor(void* object) {
  EnterRoomReq* _this = reinterpret_cast< EnterRoomReq* >(object);
  (void)_this;
}
void EnterRoomReq::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void EnterRoomReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EnterRoomReq& EnterRoomReq::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_EnterRoomReq_CSMsg_2eproto.base);
  return *internal_default_instance();
}


void EnterRoomReq::Clear() {
// @@protoc_insertion_point(message_clear_start:CSProto.EnterRoomReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EnterRoomReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* EnterRoomReq::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CSProto.EnterRoomReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSProto.EnterRoomReq)
  return target;
}

size_t EnterRoomReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CSProto.EnterRoomReq)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EnterRoomReq::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CSProto.EnterRoomReq)
  GOOGLE_DCHECK_NE(&from, this);
  const EnterRoomReq* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<EnterRoomReq>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CSProto.EnterRoomReq)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CSProto.EnterRoomReq)
    MergeFrom(*source);
  }
}

void EnterRoomReq::MergeFrom(const EnterRoomReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CSProto.EnterRoomReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void EnterRoomReq::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CSProto.EnterRoomReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EnterRoomReq::CopyFrom(const EnterRoomReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CSProto.EnterRoomReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EnterRoomReq::IsInitialized() const {
  return true;
}

void EnterRoomReq::InternalSwap(EnterRoomReq* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata EnterRoomReq::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class EnterRoomAck::_Internal {
 public:
};

EnterRoomAck::EnterRoomAck(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CSProto.EnterRoomAck)
}
EnterRoomAck::EnterRoomAck(const EnterRoomAck& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  err_ = from.err_;
  // @@protoc_insertion_point(copy_constructor:CSProto.EnterRoomAck)
}

void EnterRoomAck::SharedCtor() {
  err_ = 0;
}

EnterRoomAck::~EnterRoomAck() {
  // @@protoc_insertion_point(destructor:CSProto.EnterRoomAck)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void EnterRoomAck::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void EnterRoomAck::ArenaDtor(void* object) {
  EnterRoomAck* _this = reinterpret_cast< EnterRoomAck* >(object);
  (void)_this;
}
void EnterRoomAck::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void EnterRoomAck::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EnterRoomAck& EnterRoomAck::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_EnterRoomAck_CSMsg_2eproto.base);
  return *internal_default_instance();
}


void EnterRoomAck::Clear() {
// @@protoc_insertion_point(message_clear_start:CSProto.EnterRoomAck)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  err_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EnterRoomAck::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .CSProto.ErrorCodeID Err = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_err(static_cast<::CSProto::ErrorCodeID>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* EnterRoomAck::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CSProto.EnterRoomAck)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .CSProto.ErrorCodeID Err = 1;
  if (this->err() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_err(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSProto.EnterRoomAck)
  return target;
}

size_t EnterRoomAck::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CSProto.EnterRoomAck)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .CSProto.ErrorCodeID Err = 1;
  if (this->err() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_err());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EnterRoomAck::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CSProto.EnterRoomAck)
  GOOGLE_DCHECK_NE(&from, this);
  const EnterRoomAck* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<EnterRoomAck>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CSProto.EnterRoomAck)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CSProto.EnterRoomAck)
    MergeFrom(*source);
  }
}

void EnterRoomAck::MergeFrom(const EnterRoomAck& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CSProto.EnterRoomAck)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.err() != 0) {
    _internal_set_err(from._internal_err());
  }
}

void EnterRoomAck::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CSProto.EnterRoomAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EnterRoomAck::CopyFrom(const EnterRoomAck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CSProto.EnterRoomAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EnterRoomAck::IsInitialized() const {
  return true;
}

void EnterRoomAck::InternalSwap(EnterRoomAck* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(err_, other->err_);
}

::PROTOBUF_NAMESPACE_ID::Metadata EnterRoomAck::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class EnterRoomNtf::_Internal {
 public:
};

void EnterRoomNtf::clear_rolelist() {
  rolelist_.Clear();
}
EnterRoomNtf::EnterRoomNtf(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  rolelist_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CSProto.EnterRoomNtf)
}
EnterRoomNtf::EnterRoomNtf(const EnterRoomNtf& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      rolelist_(from.rolelist_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CSProto.EnterRoomNtf)
}

void EnterRoomNtf::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_EnterRoomNtf_CSMsg_2eproto.base);
}

EnterRoomNtf::~EnterRoomNtf() {
  // @@protoc_insertion_point(destructor:CSProto.EnterRoomNtf)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void EnterRoomNtf::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void EnterRoomNtf::ArenaDtor(void* object) {
  EnterRoomNtf* _this = reinterpret_cast< EnterRoomNtf* >(object);
  (void)_this;
}
void EnterRoomNtf::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void EnterRoomNtf::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EnterRoomNtf& EnterRoomNtf::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_EnterRoomNtf_CSMsg_2eproto.base);
  return *internal_default_instance();
}


void EnterRoomNtf::Clear() {
// @@protoc_insertion_point(message_clear_start:CSProto.EnterRoomNtf)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  rolelist_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EnterRoomNtf::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .CSProto.EnterRoomRoleInfo RoleList = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_rolelist(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* EnterRoomNtf::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CSProto.EnterRoomNtf)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CSProto.EnterRoomRoleInfo RoleList = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_rolelist_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_rolelist(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSProto.EnterRoomNtf)
  return target;
}

size_t EnterRoomNtf::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CSProto.EnterRoomNtf)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CSProto.EnterRoomRoleInfo RoleList = 1;
  total_size += 1UL * this->_internal_rolelist_size();
  for (const auto& msg : this->rolelist_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EnterRoomNtf::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CSProto.EnterRoomNtf)
  GOOGLE_DCHECK_NE(&from, this);
  const EnterRoomNtf* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<EnterRoomNtf>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CSProto.EnterRoomNtf)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CSProto.EnterRoomNtf)
    MergeFrom(*source);
  }
}

void EnterRoomNtf::MergeFrom(const EnterRoomNtf& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CSProto.EnterRoomNtf)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  rolelist_.MergeFrom(from.rolelist_);
}

void EnterRoomNtf::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CSProto.EnterRoomNtf)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EnterRoomNtf::CopyFrom(const EnterRoomNtf& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CSProto.EnterRoomNtf)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EnterRoomNtf::IsInitialized() const {
  return true;
}

void EnterRoomNtf::InternalSwap(EnterRoomNtf* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  rolelist_.InternalSwap(&other->rolelist_);
}

::PROTOBUF_NAMESPACE_ID::Metadata EnterRoomNtf::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class MoveReq::_Internal {
 public:
  static const ::CSProto::MovementInfo& movement(const MoveReq* msg);
};

const ::CSProto::MovementInfo&
MoveReq::_Internal::movement(const MoveReq* msg) {
  return *msg->movement_;
}
void MoveReq::clear_movement() {
  if (GetArena() == nullptr && movement_ != nullptr) {
    delete movement_;
  }
  movement_ = nullptr;
}
MoveReq::MoveReq(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CSProto.MoveReq)
}
MoveReq::MoveReq(const MoveReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_movement()) {
    movement_ = new ::CSProto::MovementInfo(*from.movement_);
  } else {
    movement_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:CSProto.MoveReq)
}

void MoveReq::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MoveReq_CSMsg_2eproto.base);
  movement_ = nullptr;
}

MoveReq::~MoveReq() {
  // @@protoc_insertion_point(destructor:CSProto.MoveReq)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MoveReq::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete movement_;
}

void MoveReq::ArenaDtor(void* object) {
  MoveReq* _this = reinterpret_cast< MoveReq* >(object);
  (void)_this;
}
void MoveReq::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MoveReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MoveReq& MoveReq::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MoveReq_CSMsg_2eproto.base);
  return *internal_default_instance();
}


void MoveReq::Clear() {
// @@protoc_insertion_point(message_clear_start:CSProto.MoveReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && movement_ != nullptr) {
    delete movement_;
  }
  movement_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MoveReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .CSProto.MovementInfo Movement = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_movement(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MoveReq::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CSProto.MoveReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .CSProto.MovementInfo Movement = 1;
  if (this->has_movement()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::movement(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSProto.MoveReq)
  return target;
}

size_t MoveReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CSProto.MoveReq)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .CSProto.MovementInfo Movement = 1;
  if (this->has_movement()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *movement_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MoveReq::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CSProto.MoveReq)
  GOOGLE_DCHECK_NE(&from, this);
  const MoveReq* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MoveReq>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CSProto.MoveReq)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CSProto.MoveReq)
    MergeFrom(*source);
  }
}

void MoveReq::MergeFrom(const MoveReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CSProto.MoveReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_movement()) {
    _internal_mutable_movement()->::CSProto::MovementInfo::MergeFrom(from._internal_movement());
  }
}

void MoveReq::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CSProto.MoveReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MoveReq::CopyFrom(const MoveReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CSProto.MoveReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MoveReq::IsInitialized() const {
  return true;
}

void MoveReq::InternalSwap(MoveReq* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(movement_, other->movement_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MoveReq::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class MoveAck::_Internal {
 public:
  static const ::CSProto::MovementInfo& movement(const MoveAck* msg);
};

const ::CSProto::MovementInfo&
MoveAck::_Internal::movement(const MoveAck* msg) {
  return *msg->movement_;
}
void MoveAck::clear_movement() {
  if (GetArena() == nullptr && movement_ != nullptr) {
    delete movement_;
  }
  movement_ = nullptr;
}
MoveAck::MoveAck(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CSProto.MoveAck)
}
MoveAck::MoveAck(const MoveAck& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_movement()) {
    movement_ = new ::CSProto::MovementInfo(*from.movement_);
  } else {
    movement_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:CSProto.MoveAck)
}

void MoveAck::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MoveAck_CSMsg_2eproto.base);
  movement_ = nullptr;
}

MoveAck::~MoveAck() {
  // @@protoc_insertion_point(destructor:CSProto.MoveAck)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MoveAck::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete movement_;
}

void MoveAck::ArenaDtor(void* object) {
  MoveAck* _this = reinterpret_cast< MoveAck* >(object);
  (void)_this;
}
void MoveAck::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MoveAck::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MoveAck& MoveAck::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MoveAck_CSMsg_2eproto.base);
  return *internal_default_instance();
}


void MoveAck::Clear() {
// @@protoc_insertion_point(message_clear_start:CSProto.MoveAck)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && movement_ != nullptr) {
    delete movement_;
  }
  movement_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MoveAck::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .CSProto.MovementInfo Movement = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_movement(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MoveAck::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CSProto.MoveAck)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .CSProto.MovementInfo Movement = 1;
  if (this->has_movement()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::movement(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSProto.MoveAck)
  return target;
}

size_t MoveAck::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CSProto.MoveAck)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .CSProto.MovementInfo Movement = 1;
  if (this->has_movement()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *movement_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MoveAck::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CSProto.MoveAck)
  GOOGLE_DCHECK_NE(&from, this);
  const MoveAck* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MoveAck>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CSProto.MoveAck)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CSProto.MoveAck)
    MergeFrom(*source);
  }
}

void MoveAck::MergeFrom(const MoveAck& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CSProto.MoveAck)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_movement()) {
    _internal_mutable_movement()->::CSProto::MovementInfo::MergeFrom(from._internal_movement());
  }
}

void MoveAck::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CSProto.MoveAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MoveAck::CopyFrom(const MoveAck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CSProto.MoveAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MoveAck::IsInitialized() const {
  return true;
}

void MoveAck::InternalSwap(MoveAck* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(movement_, other->movement_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MoveAck::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class MoveNtf::_Internal {
 public:
  static const ::CSProto::MoveRoleInfo& moverole(const MoveNtf* msg);
};

const ::CSProto::MoveRoleInfo&
MoveNtf::_Internal::moverole(const MoveNtf* msg) {
  return *msg->moverole_;
}
void MoveNtf::clear_moverole() {
  if (GetArena() == nullptr && moverole_ != nullptr) {
    delete moverole_;
  }
  moverole_ = nullptr;
}
MoveNtf::MoveNtf(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CSProto.MoveNtf)
}
MoveNtf::MoveNtf(const MoveNtf& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_moverole()) {
    moverole_ = new ::CSProto::MoveRoleInfo(*from.moverole_);
  } else {
    moverole_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:CSProto.MoveNtf)
}

void MoveNtf::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MoveNtf_CSMsg_2eproto.base);
  moverole_ = nullptr;
}

MoveNtf::~MoveNtf() {
  // @@protoc_insertion_point(destructor:CSProto.MoveNtf)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MoveNtf::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete moverole_;
}

void MoveNtf::ArenaDtor(void* object) {
  MoveNtf* _this = reinterpret_cast< MoveNtf* >(object);
  (void)_this;
}
void MoveNtf::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MoveNtf::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MoveNtf& MoveNtf::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MoveNtf_CSMsg_2eproto.base);
  return *internal_default_instance();
}


void MoveNtf::Clear() {
// @@protoc_insertion_point(message_clear_start:CSProto.MoveNtf)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && moverole_ != nullptr) {
    delete moverole_;
  }
  moverole_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MoveNtf::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .CSProto.MoveRoleInfo MoveRole = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_moverole(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MoveNtf::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CSProto.MoveNtf)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .CSProto.MoveRoleInfo MoveRole = 1;
  if (this->has_moverole()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::moverole(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSProto.MoveNtf)
  return target;
}

size_t MoveNtf::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CSProto.MoveNtf)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .CSProto.MoveRoleInfo MoveRole = 1;
  if (this->has_moverole()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *moverole_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MoveNtf::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CSProto.MoveNtf)
  GOOGLE_DCHECK_NE(&from, this);
  const MoveNtf* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MoveNtf>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CSProto.MoveNtf)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CSProto.MoveNtf)
    MergeFrom(*source);
  }
}

void MoveNtf::MergeFrom(const MoveNtf& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CSProto.MoveNtf)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_moverole()) {
    _internal_mutable_moverole()->::CSProto::MoveRoleInfo::MergeFrom(from._internal_moverole());
  }
}

void MoveNtf::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CSProto.MoveNtf)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MoveNtf::CopyFrom(const MoveNtf& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CSProto.MoveNtf)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MoveNtf::IsInitialized() const {
  return true;
}

void MoveNtf::InternalSwap(MoveNtf* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(moverole_, other->moverole_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MoveNtf::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace CSProto
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::CSProto::SYS_PING* Arena::CreateMaybeMessage< ::CSProto::SYS_PING >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CSProto::SYS_PING >(arena);
}
template<> PROTOBUF_NOINLINE ::CSProto::SYS_PONG* Arena::CreateMaybeMessage< ::CSProto::SYS_PONG >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CSProto::SYS_PONG >(arena);
}
template<> PROTOBUF_NOINLINE ::CSProto::TestReq* Arena::CreateMaybeMessage< ::CSProto::TestReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CSProto::TestReq >(arena);
}
template<> PROTOBUF_NOINLINE ::CSProto::TestAck_TestMapEntry_DoNotUse* Arena::CreateMaybeMessage< ::CSProto::TestAck_TestMapEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CSProto::TestAck_TestMapEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::CSProto::TestAck* Arena::CreateMaybeMessage< ::CSProto::TestAck >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CSProto::TestAck >(arena);
}
template<> PROTOBUF_NOINLINE ::CSProto::ErrorAck* Arena::CreateMaybeMessage< ::CSProto::ErrorAck >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CSProto::ErrorAck >(arena);
}
template<> PROTOBUF_NOINLINE ::CSProto::LoginReq* Arena::CreateMaybeMessage< ::CSProto::LoginReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CSProto::LoginReq >(arena);
}
template<> PROTOBUF_NOINLINE ::CSProto::LoginAck* Arena::CreateMaybeMessage< ::CSProto::LoginAck >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CSProto::LoginAck >(arena);
}
template<> PROTOBUF_NOINLINE ::CSProto::EnterRoomReq* Arena::CreateMaybeMessage< ::CSProto::EnterRoomReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CSProto::EnterRoomReq >(arena);
}
template<> PROTOBUF_NOINLINE ::CSProto::EnterRoomAck* Arena::CreateMaybeMessage< ::CSProto::EnterRoomAck >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CSProto::EnterRoomAck >(arena);
}
template<> PROTOBUF_NOINLINE ::CSProto::EnterRoomNtf* Arena::CreateMaybeMessage< ::CSProto::EnterRoomNtf >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CSProto::EnterRoomNtf >(arena);
}
template<> PROTOBUF_NOINLINE ::CSProto::MoveReq* Arena::CreateMaybeMessage< ::CSProto::MoveReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CSProto::MoveReq >(arena);
}
template<> PROTOBUF_NOINLINE ::CSProto::MoveAck* Arena::CreateMaybeMessage< ::CSProto::MoveAck >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CSProto::MoveAck >(arena);
}
template<> PROTOBUF_NOINLINE ::CSProto::MoveNtf* Arena::CreateMaybeMessage< ::CSProto::MoveNtf >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CSProto::MoveNtf >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
